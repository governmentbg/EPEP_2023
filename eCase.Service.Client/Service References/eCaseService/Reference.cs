//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eCase.Service.Client.eCaseService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfocaseFault", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class InfocaseFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorField {
            get {
                return this.ErrorFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorFieldField, value) != true)) {
                    this.ErrorFieldField = value;
                    this.RaisePropertyChanged("ErrorField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IncomingDocument", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class IncomingDocument : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> CaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CourtCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private eCase.Service.Client.eCaseService.Entity EntityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime IncomingDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> IncomingDocumentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncomingDocumentTypeCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IncomingNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private eCase.Service.Client.eCaseService.Person PersonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> CaseId {
            get {
                return this.CaseIdField;
            }
            set {
                if ((this.CaseIdField.Equals(value) != true)) {
                    this.CaseIdField = value;
                    this.RaisePropertyChanged("CaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CourtCode {
            get {
                return this.CourtCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CourtCodeField, value) != true)) {
                    this.CourtCodeField = value;
                    this.RaisePropertyChanged("CourtCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public eCase.Service.Client.eCaseService.Entity Entity {
            get {
                return this.EntityField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityField, value) != true)) {
                    this.EntityField = value;
                    this.RaisePropertyChanged("Entity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime IncomingDate {
            get {
                return this.IncomingDateField;
            }
            set {
                if ((this.IncomingDateField.Equals(value) != true)) {
                    this.IncomingDateField = value;
                    this.RaisePropertyChanged("IncomingDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> IncomingDocumentId {
            get {
                return this.IncomingDocumentIdField;
            }
            set {
                if ((this.IncomingDocumentIdField.Equals(value) != true)) {
                    this.IncomingDocumentIdField = value;
                    this.RaisePropertyChanged("IncomingDocumentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncomingDocumentTypeCode {
            get {
                return this.IncomingDocumentTypeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.IncomingDocumentTypeCodeField, value) != true)) {
                    this.IncomingDocumentTypeCodeField = value;
                    this.RaisePropertyChanged("IncomingDocumentTypeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IncomingNumber {
            get {
                return this.IncomingNumberField;
            }
            set {
                if ((this.IncomingNumberField.Equals(value) != true)) {
                    this.IncomingNumberField = value;
                    this.RaisePropertyChanged("IncomingNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public eCase.Service.Client.eCaseService.Person Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Entity", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class Entity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BulstatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bulstat {
            get {
                return this.BulstatField;
            }
            set {
                if ((object.ReferenceEquals(this.BulstatField, value) != true)) {
                    this.BulstatField = value;
                    this.RaisePropertyChanged("Bulstat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class Person : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EGNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EGN {
            get {
                return this.EGNField;
            }
            set {
                if ((object.ReferenceEquals(this.EGNField, value) != true)) {
                    this.EGNField = value;
                    this.RaisePropertyChanged("EGN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Firstname {
            get {
                return this.FirstnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstnameField, value) != true)) {
                    this.FirstnameField = value;
                    this.RaisePropertyChanged("Firstname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lastname {
            get {
                return this.LastnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastnameField, value) != true)) {
                    this.LastnameField = value;
                    this.RaisePropertyChanged("Lastname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Secondname {
            get {
                return this.SecondnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondnameField, value) != true)) {
                    this.SecondnameField = value;
                    this.RaisePropertyChanged("Secondname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OutgoingDocument", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class OutgoingDocument : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> CaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private eCase.Service.Client.eCaseService.Entity EntityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> OutgoingDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> OutgoingDocumentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OutgoingDocumentTypeCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OutgoingNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private eCase.Service.Client.eCaseService.Person PersonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> CaseId {
            get {
                return this.CaseIdField;
            }
            set {
                if ((this.CaseIdField.Equals(value) != true)) {
                    this.CaseIdField = value;
                    this.RaisePropertyChanged("CaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public eCase.Service.Client.eCaseService.Entity Entity {
            get {
                return this.EntityField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityField, value) != true)) {
                    this.EntityField = value;
                    this.RaisePropertyChanged("Entity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> OutgoingDate {
            get {
                return this.OutgoingDateField;
            }
            set {
                if ((this.OutgoingDateField.Equals(value) != true)) {
                    this.OutgoingDateField = value;
                    this.RaisePropertyChanged("OutgoingDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> OutgoingDocumentId {
            get {
                return this.OutgoingDocumentIdField;
            }
            set {
                if ((this.OutgoingDocumentIdField.Equals(value) != true)) {
                    this.OutgoingDocumentIdField = value;
                    this.RaisePropertyChanged("OutgoingDocumentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OutgoingDocumentTypeCode {
            get {
                return this.OutgoingDocumentTypeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.OutgoingDocumentTypeCodeField, value) != true)) {
                    this.OutgoingDocumentTypeCodeField = value;
                    this.RaisePropertyChanged("OutgoingDocumentTypeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OutgoingNumber {
            get {
                return this.OutgoingNumberField;
            }
            set {
                if ((this.OutgoingNumberField.Equals(value) != true)) {
                    this.OutgoingNumberField = value;
                    this.RaisePropertyChanged("OutgoingNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public eCase.Service.Client.eCaseService.Person Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Case", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class Case : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CaseCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> CaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CaseKindCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CaseTypeCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CaseYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CourtCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DepartmentNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FormationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> IncomingDocumentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LegalSubjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PanelNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatisticCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CaseCode {
            get {
                return this.CaseCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CaseCodeField, value) != true)) {
                    this.CaseCodeField = value;
                    this.RaisePropertyChanged("CaseCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> CaseId {
            get {
                return this.CaseIdField;
            }
            set {
                if ((this.CaseIdField.Equals(value) != true)) {
                    this.CaseIdField = value;
                    this.RaisePropertyChanged("CaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CaseKindCode {
            get {
                return this.CaseKindCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CaseKindCodeField, value) != true)) {
                    this.CaseKindCodeField = value;
                    this.RaisePropertyChanged("CaseKindCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CaseTypeCode {
            get {
                return this.CaseTypeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CaseTypeCodeField, value) != true)) {
                    this.CaseTypeCodeField = value;
                    this.RaisePropertyChanged("CaseTypeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CaseYear {
            get {
                return this.CaseYearField;
            }
            set {
                if ((this.CaseYearField.Equals(value) != true)) {
                    this.CaseYearField = value;
                    this.RaisePropertyChanged("CaseYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CourtCode {
            get {
                return this.CourtCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CourtCodeField, value) != true)) {
                    this.CourtCodeField = value;
                    this.RaisePropertyChanged("CourtCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DepartmentName {
            get {
                return this.DepartmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentNameField, value) != true)) {
                    this.DepartmentNameField = value;
                    this.RaisePropertyChanged("DepartmentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FormationDate {
            get {
                return this.FormationDateField;
            }
            set {
                if ((this.FormationDateField.Equals(value) != true)) {
                    this.FormationDateField = value;
                    this.RaisePropertyChanged("FormationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> IncomingDocumentId {
            get {
                return this.IncomingDocumentIdField;
            }
            set {
                if ((this.IncomingDocumentIdField.Equals(value) != true)) {
                    this.IncomingDocumentIdField = value;
                    this.RaisePropertyChanged("IncomingDocumentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LegalSubject {
            get {
                return this.LegalSubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.LegalSubjectField, value) != true)) {
                    this.LegalSubjectField = value;
                    this.RaisePropertyChanged("LegalSubject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PanelName {
            get {
                return this.PanelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PanelNameField, value) != true)) {
                    this.PanelNameField = value;
                    this.RaisePropertyChanged("PanelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatisticCode {
            get {
                return this.StatisticCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.StatisticCodeField, value) != true)) {
                    this.StatisticCodeField = value;
                    this.RaisePropertyChanged("StatisticCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectedCase", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class ConnectedCase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConnectedCaseTypeCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PredecessorCaseIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CaseId {
            get {
                return this.CaseIdField;
            }
            set {
                if ((this.CaseIdField.Equals(value) != true)) {
                    this.CaseIdField = value;
                    this.RaisePropertyChanged("CaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectedCaseTypeCode {
            get {
                return this.ConnectedCaseTypeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectedCaseTypeCodeField, value) != true)) {
                    this.ConnectedCaseTypeCodeField = value;
                    this.RaisePropertyChanged("ConnectedCaseTypeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PredecessorCaseId {
            get {
                return this.PredecessorCaseIdField;
            }
            set {
                if ((this.PredecessorCaseIdField.Equals(value) != true)) {
                    this.PredecessorCaseIdField = value;
                    this.RaisePropertyChanged("PredecessorCaseId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Reporter", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class Reporter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateAssignedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateReplacedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JudgeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonReplacedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> ReporterIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CaseId {
            get {
                return this.CaseIdField;
            }
            set {
                if ((this.CaseIdField.Equals(value) != true)) {
                    this.CaseIdField = value;
                    this.RaisePropertyChanged("CaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateAssigned {
            get {
                return this.DateAssignedField;
            }
            set {
                if ((this.DateAssignedField.Equals(value) != true)) {
                    this.DateAssignedField = value;
                    this.RaisePropertyChanged("DateAssigned");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateReplaced {
            get {
                return this.DateReplacedField;
            }
            set {
                if ((this.DateReplacedField.Equals(value) != true)) {
                    this.DateReplacedField = value;
                    this.RaisePropertyChanged("DateReplaced");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JudgeName {
            get {
                return this.JudgeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.JudgeNameField, value) != true)) {
                    this.JudgeNameField = value;
                    this.RaisePropertyChanged("JudgeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReasonReplaced {
            get {
                return this.ReasonReplacedField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonReplacedField, value) != true)) {
                    this.ReasonReplacedField = value;
                    this.RaisePropertyChanged("ReasonReplaced");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> ReporterId {
            get {
                return this.ReporterIdField;
            }
            set {
                if ((this.ReporterIdField.Equals(value) != true)) {
                    this.ReporterIdField = value;
                    this.RaisePropertyChanged("ReporterId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Assignment", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class Assignment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> AssignmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssignorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IncomingDocumentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JudgeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> AssignmentId {
            get {
                return this.AssignmentIdField;
            }
            set {
                if ((this.AssignmentIdField.Equals(value) != true)) {
                    this.AssignmentIdField = value;
                    this.RaisePropertyChanged("AssignmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Assignor {
            get {
                return this.AssignorField;
            }
            set {
                if ((object.ReferenceEquals(this.AssignorField, value) != true)) {
                    this.AssignorField = value;
                    this.RaisePropertyChanged("Assignor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CaseId {
            get {
                return this.CaseIdField;
            }
            set {
                if ((this.CaseIdField.Equals(value) != true)) {
                    this.CaseIdField = value;
                    this.RaisePropertyChanged("CaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid IncomingDocumentId {
            get {
                return this.IncomingDocumentIdField;
            }
            set {
                if ((this.IncomingDocumentIdField.Equals(value) != true)) {
                    this.IncomingDocumentIdField = value;
                    this.RaisePropertyChanged("IncomingDocumentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JudgeName {
            get {
                return this.JudgeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.JudgeNameField, value) != true)) {
                    this.JudgeNameField = value;
                    this.RaisePropertyChanged("JudgeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Hearing", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class Hearing : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CourtRoomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> HearingIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HearingResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HearingTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCanceledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProsecutorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecretaryNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CaseId {
            get {
                return this.CaseIdField;
            }
            set {
                if ((this.CaseIdField.Equals(value) != true)) {
                    this.CaseIdField = value;
                    this.RaisePropertyChanged("CaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CourtRoom {
            get {
                return this.CourtRoomField;
            }
            set {
                if ((object.ReferenceEquals(this.CourtRoomField, value) != true)) {
                    this.CourtRoomField = value;
                    this.RaisePropertyChanged("CourtRoom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> HearingId {
            get {
                return this.HearingIdField;
            }
            set {
                if ((this.HearingIdField.Equals(value) != true)) {
                    this.HearingIdField = value;
                    this.RaisePropertyChanged("HearingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HearingResult {
            get {
                return this.HearingResultField;
            }
            set {
                if ((object.ReferenceEquals(this.HearingResultField, value) != true)) {
                    this.HearingResultField = value;
                    this.RaisePropertyChanged("HearingResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HearingType {
            get {
                return this.HearingTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.HearingTypeField, value) != true)) {
                    this.HearingTypeField = value;
                    this.RaisePropertyChanged("HearingType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCanceled {
            get {
                return this.IsCanceledField;
            }
            set {
                if ((this.IsCanceledField.Equals(value) != true)) {
                    this.IsCanceledField = value;
                    this.RaisePropertyChanged("IsCanceled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProsecutorName {
            get {
                return this.ProsecutorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProsecutorNameField, value) != true)) {
                    this.ProsecutorNameField = value;
                    this.RaisePropertyChanged("ProsecutorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecretaryName {
            get {
                return this.SecretaryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecretaryNameField, value) != true)) {
                    this.SecretaryNameField = value;
                    this.RaisePropertyChanged("SecretaryName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HearingParticipant", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class HearingParticipant : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid HearingIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> HearingParticipantIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JudgeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubstituteForField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubstituteReasonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid HearingId {
            get {
                return this.HearingIdField;
            }
            set {
                if ((this.HearingIdField.Equals(value) != true)) {
                    this.HearingIdField = value;
                    this.RaisePropertyChanged("HearingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> HearingParticipantId {
            get {
                return this.HearingParticipantIdField;
            }
            set {
                if ((this.HearingParticipantIdField.Equals(value) != true)) {
                    this.HearingParticipantIdField = value;
                    this.RaisePropertyChanged("HearingParticipantId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JudgeName {
            get {
                return this.JudgeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.JudgeNameField, value) != true)) {
                    this.JudgeNameField = value;
                    this.RaisePropertyChanged("JudgeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubstituteFor {
            get {
                return this.SubstituteForField;
            }
            set {
                if ((object.ReferenceEquals(this.SubstituteForField, value) != true)) {
                    this.SubstituteForField = value;
                    this.RaisePropertyChanged("SubstituteFor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubstituteReason {
            get {
                return this.SubstituteReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.SubstituteReasonField, value) != true)) {
                    this.SubstituteReasonField = value;
                    this.RaisePropertyChanged("SubstituteReason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Act", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class Act : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> ActIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActKindCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateInPowerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateSignedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> HearingIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> MotiveDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> NumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> ActId {
            get {
                return this.ActIdField;
            }
            set {
                if ((this.ActIdField.Equals(value) != true)) {
                    this.ActIdField = value;
                    this.RaisePropertyChanged("ActId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActKindCode {
            get {
                return this.ActKindCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ActKindCodeField, value) != true)) {
                    this.ActKindCodeField = value;
                    this.RaisePropertyChanged("ActKindCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CaseId {
            get {
                return this.CaseIdField;
            }
            set {
                if ((this.CaseIdField.Equals(value) != true)) {
                    this.CaseIdField = value;
                    this.RaisePropertyChanged("CaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateInPower {
            get {
                return this.DateInPowerField;
            }
            set {
                if ((this.DateInPowerField.Equals(value) != true)) {
                    this.DateInPowerField = value;
                    this.RaisePropertyChanged("DateInPower");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateSigned {
            get {
                return this.DateSignedField;
            }
            set {
                if ((this.DateSignedField.Equals(value) != true)) {
                    this.DateSignedField = value;
                    this.RaisePropertyChanged("DateSigned");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> HearingId {
            get {
                return this.HearingIdField;
            }
            set {
                if ((this.HearingIdField.Equals(value) != true)) {
                    this.HearingIdField = value;
                    this.RaisePropertyChanged("HearingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> MotiveDate {
            get {
                return this.MotiveDateField;
            }
            set {
                if ((this.MotiveDateField.Equals(value) != true)) {
                    this.MotiveDateField = value;
                    this.RaisePropertyChanged("MotiveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActPreparator", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class ActPreparator : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ActIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> ActPreparatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JudgeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubstituteForField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubstituteReasonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ActId {
            get {
                return this.ActIdField;
            }
            set {
                if ((this.ActIdField.Equals(value) != true)) {
                    this.ActIdField = value;
                    this.RaisePropertyChanged("ActId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> ActPreparatorId {
            get {
                return this.ActPreparatorIdField;
            }
            set {
                if ((this.ActPreparatorIdField.Equals(value) != true)) {
                    this.ActPreparatorIdField = value;
                    this.RaisePropertyChanged("ActPreparatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JudgeName {
            get {
                return this.JudgeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.JudgeNameField, value) != true)) {
                    this.JudgeNameField = value;
                    this.RaisePropertyChanged("JudgeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubstituteFor {
            get {
                return this.SubstituteForField;
            }
            set {
                if ((object.ReferenceEquals(this.SubstituteForField, value) != true)) {
                    this.SubstituteForField = value;
                    this.RaisePropertyChanged("SubstituteFor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubstituteReason {
            get {
                return this.SubstituteReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.SubstituteReasonField, value) != true)) {
                    this.SubstituteReasonField = value;
                    this.RaisePropertyChanged("SubstituteReason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Appeal", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class Appeal : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ActIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> AppealIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppealKindCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateFiledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SideIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ActId {
            get {
                return this.ActIdField;
            }
            set {
                if ((this.ActIdField.Equals(value) != true)) {
                    this.ActIdField = value;
                    this.RaisePropertyChanged("ActId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> AppealId {
            get {
                return this.AppealIdField;
            }
            set {
                if ((this.AppealIdField.Equals(value) != true)) {
                    this.AppealIdField = value;
                    this.RaisePropertyChanged("AppealId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppealKindCode {
            get {
                return this.AppealKindCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.AppealKindCodeField, value) != true)) {
                    this.AppealKindCodeField = value;
                    this.RaisePropertyChanged("AppealKindCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateFiled {
            get {
                return this.DateFiledField;
            }
            set {
                if ((this.DateFiledField.Equals(value) != true)) {
                    this.DateFiledField = value;
                    this.RaisePropertyChanged("DateFiled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SideId {
            get {
                return this.SideIdField;
            }
            set {
                if ((this.SideIdField.Equals(value) != true)) {
                    this.SideIdField = value;
                    this.RaisePropertyChanged("SideId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CaseRuling", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class CaseRuling : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> ActIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> CaseRulingIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CaseRulingKindCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> HearingIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> ActId {
            get {
                return this.ActIdField;
            }
            set {
                if ((this.ActIdField.Equals(value) != true)) {
                    this.ActIdField = value;
                    this.RaisePropertyChanged("ActId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CaseId {
            get {
                return this.CaseIdField;
            }
            set {
                if ((this.CaseIdField.Equals(value) != true)) {
                    this.CaseIdField = value;
                    this.RaisePropertyChanged("CaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> CaseRulingId {
            get {
                return this.CaseRulingIdField;
            }
            set {
                if ((this.CaseRulingIdField.Equals(value) != true)) {
                    this.CaseRulingIdField = value;
                    this.RaisePropertyChanged("CaseRulingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CaseRulingKindCode {
            get {
                return this.CaseRulingKindCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CaseRulingKindCodeField, value) != true)) {
                    this.CaseRulingKindCodeField = value;
                    this.RaisePropertyChanged("CaseRulingKindCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> HearingId {
            get {
                return this.HearingIdField;
            }
            set {
                if ((this.HearingIdField.Equals(value) != true)) {
                    this.HearingIdField = value;
                    this.RaisePropertyChanged("HearingId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Side", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class Side : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private eCase.Service.Client.eCaseService.Entity EntityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime InsertDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private eCase.Service.Client.eCaseService.Person PersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProceduralRelationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> SideIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SideInvolvementKindCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CaseId {
            get {
                return this.CaseIdField;
            }
            set {
                if ((this.CaseIdField.Equals(value) != true)) {
                    this.CaseIdField = value;
                    this.RaisePropertyChanged("CaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public eCase.Service.Client.eCaseService.Entity Entity {
            get {
                return this.EntityField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityField, value) != true)) {
                    this.EntityField = value;
                    this.RaisePropertyChanged("Entity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime InsertDate {
            get {
                return this.InsertDateField;
            }
            set {
                if ((this.InsertDateField.Equals(value) != true)) {
                    this.InsertDateField = value;
                    this.RaisePropertyChanged("InsertDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public eCase.Service.Client.eCaseService.Person Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProceduralRelation {
            get {
                return this.ProceduralRelationField;
            }
            set {
                if ((object.ReferenceEquals(this.ProceduralRelationField, value) != true)) {
                    this.ProceduralRelationField = value;
                    this.RaisePropertyChanged("ProceduralRelation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> SideId {
            get {
                return this.SideIdField;
            }
            set {
                if ((this.SideIdField.Equals(value) != true)) {
                    this.SideIdField = value;
                    this.RaisePropertyChanged("SideId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SideInvolvementKindCode {
            get {
                return this.SideInvolvementKindCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SideInvolvementKindCodeField, value) != true)) {
                    this.SideInvolvementKindCodeField = value;
                    this.RaisePropertyChanged("SideInvolvementKindCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LawyerAssignment", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class LawyerAssignment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> LawyerAssignmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid LawyerRegistrationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> SideIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> LawyerAssignmentId {
            get {
                return this.LawyerAssignmentIdField;
            }
            set {
                if ((this.LawyerAssignmentIdField.Equals(value) != true)) {
                    this.LawyerAssignmentIdField = value;
                    this.RaisePropertyChanged("LawyerAssignmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid LawyerRegistrationId {
            get {
                return this.LawyerRegistrationIdField;
            }
            set {
                if ((this.LawyerRegistrationIdField.Equals(value) != true)) {
                    this.LawyerRegistrationIdField = value;
                    this.RaisePropertyChanged("LawyerRegistrationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> SideId {
            get {
                return this.SideIdField;
            }
            set {
                if ((this.SideIdField.Equals(value) != true)) {
                    this.SideIdField = value;
                    this.RaisePropertyChanged("SideId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonAssignment", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class PersonAssignment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> PersonAssignmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PersonRegistrationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> SideIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> PersonAssignmentId {
            get {
                return this.PersonAssignmentIdField;
            }
            set {
                if ((this.PersonAssignmentIdField.Equals(value) != true)) {
                    this.PersonAssignmentIdField = value;
                    this.RaisePropertyChanged("PersonAssignmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PersonRegistrationId {
            get {
                return this.PersonRegistrationIdField;
            }
            set {
                if ((this.PersonRegistrationIdField.Equals(value) != true)) {
                    this.PersonRegistrationIdField = value;
                    this.RaisePropertyChanged("PersonRegistrationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> SideId {
            get {
                return this.SideIdField;
            }
            set {
                if ((this.SideIdField.Equals(value) != true)) {
                    this.SideIdField = value;
                    this.RaisePropertyChanged("SideId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LawyerRegistration", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class LawyerRegistration : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BirthDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid LawyerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> LawyerRegistrationIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BirthDate {
            get {
                return this.BirthDateField;
            }
            set {
                if ((this.BirthDateField.Equals(value) != true)) {
                    this.BirthDateField = value;
                    this.RaisePropertyChanged("BirthDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid LawyerId {
            get {
                return this.LawyerIdField;
            }
            set {
                if ((this.LawyerIdField.Equals(value) != true)) {
                    this.LawyerIdField = value;
                    this.RaisePropertyChanged("LawyerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> LawyerRegistrationId {
            get {
                return this.LawyerRegistrationIdField;
            }
            set {
                if ((this.LawyerRegistrationIdField.Equals(value) != true)) {
                    this.LawyerRegistrationIdField = value;
                    this.RaisePropertyChanged("LawyerRegistrationId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonRegistration", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class PersonRegistration : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BirthDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EGNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> PersonRegistrationIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BirthDate {
            get {
                return this.BirthDateField;
            }
            set {
                if ((this.BirthDateField.Equals(value) != true)) {
                    this.BirthDateField = value;
                    this.RaisePropertyChanged("BirthDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EGN {
            get {
                return this.EGNField;
            }
            set {
                if ((object.ReferenceEquals(this.EGNField, value) != true)) {
                    this.EGNField = value;
                    this.RaisePropertyChanged("EGN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> PersonRegistrationId {
            get {
                return this.PersonRegistrationIdField;
            }
            set {
                if ((this.PersonRegistrationIdField.Equals(value) != true)) {
                    this.PersonRegistrationIdField = value;
                    this.RaisePropertyChanged("PersonRegistrationId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Summon", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class Summon : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddresseeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateServedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ParentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SideIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> SummonIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SummonKindField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SummonTypeCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Addressee {
            get {
                return this.AddresseeField;
            }
            set {
                if ((object.ReferenceEquals(this.AddresseeField, value) != true)) {
                    this.AddresseeField = value;
                    this.RaisePropertyChanged("Addressee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateServed {
            get {
                return this.DateServedField;
            }
            set {
                if ((this.DateServedField.Equals(value) != true)) {
                    this.DateServedField = value;
                    this.RaisePropertyChanged("DateServed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ParentId {
            get {
                return this.ParentIdField;
            }
            set {
                if ((this.ParentIdField.Equals(value) != true)) {
                    this.ParentIdField = value;
                    this.RaisePropertyChanged("ParentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SideId {
            get {
                return this.SideIdField;
            }
            set {
                if ((this.SideIdField.Equals(value) != true)) {
                    this.SideIdField = value;
                    this.RaisePropertyChanged("SideId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> SummonId {
            get {
                return this.SummonIdField;
            }
            set {
                if ((this.SummonIdField.Equals(value) != true)) {
                    this.SummonIdField = value;
                    this.RaisePropertyChanged("SummonId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SummonKind {
            get {
                return this.SummonKindField;
            }
            set {
                if ((object.ReferenceEquals(this.SummonKindField, value) != true)) {
                    this.SummonKindField = value;
                    this.RaisePropertyChanged("SummonKind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SummonTypeCode {
            get {
                return this.SummonTypeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SummonTypeCodeField, value) != true)) {
                    this.SummonTypeCodeField = value;
                    this.RaisePropertyChanged("SummonTypeCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScannedDocument", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class ScannedDocument : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ScannedDocumentContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> ScannedDocumentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScannedDocumentMimeTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CaseId {
            get {
                return this.CaseIdField;
            }
            set {
                if ((this.CaseIdField.Equals(value) != true)) {
                    this.CaseIdField = value;
                    this.RaisePropertyChanged("CaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ScannedDocumentContent {
            get {
                return this.ScannedDocumentContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ScannedDocumentContentField, value) != true)) {
                    this.ScannedDocumentContentField = value;
                    this.RaisePropertyChanged("ScannedDocumentContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> ScannedDocumentId {
            get {
                return this.ScannedDocumentIdField;
            }
            set {
                if ((this.ScannedDocumentIdField.Equals(value) != true)) {
                    this.ScannedDocumentIdField = value;
                    this.RaisePropertyChanged("ScannedDocumentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScannedDocumentMimeType {
            get {
                return this.ScannedDocumentMimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ScannedDocumentMimeTypeField, value) != true)) {
                    this.ScannedDocumentMimeTypeField = value;
                    this.RaisePropertyChanged("ScannedDocumentMimeType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AssignmentFile", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class AssignmentFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> AssignmentFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid AssignmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ProtocolContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtocolMimeTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> AssignmentFileId {
            get {
                return this.AssignmentFileIdField;
            }
            set {
                if ((this.AssignmentFileIdField.Equals(value) != true)) {
                    this.AssignmentFileIdField = value;
                    this.RaisePropertyChanged("AssignmentFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid AssignmentId {
            get {
                return this.AssignmentIdField;
            }
            set {
                if ((this.AssignmentIdField.Equals(value) != true)) {
                    this.AssignmentIdField = value;
                    this.RaisePropertyChanged("AssignmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ProtocolContent {
            get {
                return this.ProtocolContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolContentField, value) != true)) {
                    this.ProtocolContentField = value;
                    this.RaisePropertyChanged("ProtocolContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtocolMimeType {
            get {
                return this.ProtocolMimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolMimeTypeField, value) != true)) {
                    this.ProtocolMimeTypeField = value;
                    this.RaisePropertyChanged("ProtocolMimeType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrivateProtocolFile", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class PrivateProtocolFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid HearingIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> PrivateProtocolFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ProtocolContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtocolMimeTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid HearingId {
            get {
                return this.HearingIdField;
            }
            set {
                if ((this.HearingIdField.Equals(value) != true)) {
                    this.HearingIdField = value;
                    this.RaisePropertyChanged("HearingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> PrivateProtocolFileId {
            get {
                return this.PrivateProtocolFileIdField;
            }
            set {
                if ((this.PrivateProtocolFileIdField.Equals(value) != true)) {
                    this.PrivateProtocolFileIdField = value;
                    this.RaisePropertyChanged("PrivateProtocolFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ProtocolContent {
            get {
                return this.ProtocolContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolContentField, value) != true)) {
                    this.ProtocolContentField = value;
                    this.RaisePropertyChanged("ProtocolContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtocolMimeType {
            get {
                return this.ProtocolMimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolMimeTypeField, value) != true)) {
                    this.ProtocolMimeTypeField = value;
                    this.RaisePropertyChanged("ProtocolMimeType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublicProtocolFile", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class PublicProtocolFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid HearingIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ProtocolContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtocolMimeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> PublicProtocolFileIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid HearingId {
            get {
                return this.HearingIdField;
            }
            set {
                if ((this.HearingIdField.Equals(value) != true)) {
                    this.HearingIdField = value;
                    this.RaisePropertyChanged("HearingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ProtocolContent {
            get {
                return this.ProtocolContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolContentField, value) != true)) {
                    this.ProtocolContentField = value;
                    this.RaisePropertyChanged("ProtocolContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtocolMimeType {
            get {
                return this.ProtocolMimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolMimeTypeField, value) != true)) {
                    this.ProtocolMimeTypeField = value;
                    this.RaisePropertyChanged("ProtocolMimeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> PublicProtocolFileId {
            get {
                return this.PublicProtocolFileIdField;
            }
            set {
                if ((this.PublicProtocolFileIdField.Equals(value) != true)) {
                    this.PublicProtocolFileIdField = value;
                    this.RaisePropertyChanged("PublicProtocolFileId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IncomingDocumentFile", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class IncomingDocumentFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] IncomingDocumentContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> IncomingDocumentFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IncomingDocumentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncomingDocumentMimeTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] IncomingDocumentContent {
            get {
                return this.IncomingDocumentContentField;
            }
            set {
                if ((object.ReferenceEquals(this.IncomingDocumentContentField, value) != true)) {
                    this.IncomingDocumentContentField = value;
                    this.RaisePropertyChanged("IncomingDocumentContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> IncomingDocumentFileId {
            get {
                return this.IncomingDocumentFileIdField;
            }
            set {
                if ((this.IncomingDocumentFileIdField.Equals(value) != true)) {
                    this.IncomingDocumentFileIdField = value;
                    this.RaisePropertyChanged("IncomingDocumentFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid IncomingDocumentId {
            get {
                return this.IncomingDocumentIdField;
            }
            set {
                if ((this.IncomingDocumentIdField.Equals(value) != true)) {
                    this.IncomingDocumentIdField = value;
                    this.RaisePropertyChanged("IncomingDocumentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncomingDocumentMimeType {
            get {
                return this.IncomingDocumentMimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.IncomingDocumentMimeTypeField, value) != true)) {
                    this.IncomingDocumentMimeTypeField = value;
                    this.RaisePropertyChanged("IncomingDocumentMimeType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OutgoingDocumentFile", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class OutgoingDocumentFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] OutgoingDocumentContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> OutgoingDocumentFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid OutgoingDocumentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OutgoingDocumentMimeTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] OutgoingDocumentContent {
            get {
                return this.OutgoingDocumentContentField;
            }
            set {
                if ((object.ReferenceEquals(this.OutgoingDocumentContentField, value) != true)) {
                    this.OutgoingDocumentContentField = value;
                    this.RaisePropertyChanged("OutgoingDocumentContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> OutgoingDocumentFileId {
            get {
                return this.OutgoingDocumentFileIdField;
            }
            set {
                if ((this.OutgoingDocumentFileIdField.Equals(value) != true)) {
                    this.OutgoingDocumentFileIdField = value;
                    this.RaisePropertyChanged("OutgoingDocumentFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid OutgoingDocumentId {
            get {
                return this.OutgoingDocumentIdField;
            }
            set {
                if ((this.OutgoingDocumentIdField.Equals(value) != true)) {
                    this.OutgoingDocumentIdField = value;
                    this.RaisePropertyChanged("OutgoingDocumentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OutgoingDocumentMimeType {
            get {
                return this.OutgoingDocumentMimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.OutgoingDocumentMimeTypeField, value) != true)) {
                    this.OutgoingDocumentMimeTypeField = value;
                    this.RaisePropertyChanged("OutgoingDocumentMimeType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SummonFile", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class SummonFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MimeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> SummonFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SummonIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MimeType {
            get {
                return this.MimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MimeTypeField, value) != true)) {
                    this.MimeTypeField = value;
                    this.RaisePropertyChanged("MimeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> SummonFileId {
            get {
                return this.SummonFileIdField;
            }
            set {
                if ((this.SummonFileIdField.Equals(value) != true)) {
                    this.SummonFileIdField = value;
                    this.RaisePropertyChanged("SummonFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SummonId {
            get {
                return this.SummonIdField;
            }
            set {
                if ((this.SummonIdField.Equals(value) != true)) {
                    this.SummonIdField = value;
                    this.RaisePropertyChanged("SummonId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrivateActFile", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class PrivateActFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ActIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PrivateActContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> PrivateActFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrivateActMimeTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ActId {
            get {
                return this.ActIdField;
            }
            set {
                if ((this.ActIdField.Equals(value) != true)) {
                    this.ActIdField = value;
                    this.RaisePropertyChanged("ActId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] PrivateActContent {
            get {
                return this.PrivateActContentField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivateActContentField, value) != true)) {
                    this.PrivateActContentField = value;
                    this.RaisePropertyChanged("PrivateActContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> PrivateActFileId {
            get {
                return this.PrivateActFileIdField;
            }
            set {
                if ((this.PrivateActFileIdField.Equals(value) != true)) {
                    this.PrivateActFileIdField = value;
                    this.RaisePropertyChanged("PrivateActFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrivateActMimeType {
            get {
                return this.PrivateActMimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivateActMimeTypeField, value) != true)) {
                    this.PrivateActMimeTypeField = value;
                    this.RaisePropertyChanged("PrivateActMimeType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublicActFile", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class PublicActFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ActIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PublicActContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> PublicActFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicActMimeTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ActId {
            get {
                return this.ActIdField;
            }
            set {
                if ((this.ActIdField.Equals(value) != true)) {
                    this.ActIdField = value;
                    this.RaisePropertyChanged("ActId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] PublicActContent {
            get {
                return this.PublicActContentField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicActContentField, value) != true)) {
                    this.PublicActContentField = value;
                    this.RaisePropertyChanged("PublicActContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> PublicActFileId {
            get {
                return this.PublicActFileIdField;
            }
            set {
                if ((this.PublicActFileIdField.Equals(value) != true)) {
                    this.PublicActFileIdField = value;
                    this.RaisePropertyChanged("PublicActFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PublicActMimeType {
            get {
                return this.PublicActMimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicActMimeTypeField, value) != true)) {
                    this.PublicActMimeTypeField = value;
                    this.RaisePropertyChanged("PublicActMimeType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrivateMotiveFile", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class PrivateMotiveFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ActIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PrivateMotiveContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> PrivateMotiveFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrivateMotiveMimeTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ActId {
            get {
                return this.ActIdField;
            }
            set {
                if ((this.ActIdField.Equals(value) != true)) {
                    this.ActIdField = value;
                    this.RaisePropertyChanged("ActId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] PrivateMotiveContent {
            get {
                return this.PrivateMotiveContentField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivateMotiveContentField, value) != true)) {
                    this.PrivateMotiveContentField = value;
                    this.RaisePropertyChanged("PrivateMotiveContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> PrivateMotiveFileId {
            get {
                return this.PrivateMotiveFileIdField;
            }
            set {
                if ((this.PrivateMotiveFileIdField.Equals(value) != true)) {
                    this.PrivateMotiveFileIdField = value;
                    this.RaisePropertyChanged("PrivateMotiveFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrivateMotiveMimeType {
            get {
                return this.PrivateMotiveMimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivateMotiveMimeTypeField, value) != true)) {
                    this.PrivateMotiveMimeTypeField = value;
                    this.RaisePropertyChanged("PrivateMotiveMimeType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PublicMotiveFile", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class PublicMotiveFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ActIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PublicMotiveContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> PublicMotiveFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicMotiveMimeTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ActId {
            get {
                return this.ActIdField;
            }
            set {
                if ((this.ActIdField.Equals(value) != true)) {
                    this.ActIdField = value;
                    this.RaisePropertyChanged("ActId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] PublicMotiveContent {
            get {
                return this.PublicMotiveContentField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicMotiveContentField, value) != true)) {
                    this.PublicMotiveContentField = value;
                    this.RaisePropertyChanged("PublicMotiveContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> PublicMotiveFileId {
            get {
                return this.PublicMotiveFileIdField;
            }
            set {
                if ((this.PublicMotiveFileIdField.Equals(value) != true)) {
                    this.PublicMotiveFileIdField = value;
                    this.RaisePropertyChanged("PublicMotiveFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PublicMotiveMimeType {
            get {
                return this.PublicMotiveMimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicMotiveMimeTypeField, value) != true)) {
                    this.PublicMotiveMimeTypeField = value;
                    this.RaisePropertyChanged("PublicMotiveMimeType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Lawyer", Namespace="http://www.abbaty.com/eCase/v2")]
    [System.SerializableAttribute()]
    public partial class Lawyer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CollegeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> LawyerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string College {
            get {
                return this.CollegeField;
            }
            set {
                if ((object.ReferenceEquals(this.CollegeField, value) != true)) {
                    this.CollegeField = value;
                    this.RaisePropertyChanged("College");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> LawyerId {
            get {
                return this.LawyerIdField;
            }
            set {
                if ((this.LawyerIdField.Equals(value) != true)) {
                    this.LawyerIdField = value;
                    this.RaisePropertyChanged("LawyerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Number {
            get {
                return this.NumberField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberField, value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.abbaty.com/eCase/v2", ConfigurationName="eCaseService.IeCaseService")]
    public interface IeCaseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePersonAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePersonAssignmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePersonAssignmentInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        bool DeletePersonAssignment(System.Guid personAssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePersonAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePersonAssignmentResponse")]
        System.Threading.Tasks.Task<bool> DeletePersonAssignmentAsync(System.Guid personAssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteScannedDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteScannedDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteScannedDocumentInfocaseFaultFa" +
            "ult", Name="InfocaseFault")]
        bool DeleteScannedDocument(System.Guid scannedDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteScannedDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteScannedDocumentResponse")]
        System.Threading.Tasks.Task<bool> DeleteScannedDocumentAsync(System.Guid scannedDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAssignmentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAssignmentFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAssignmentFileInfocaseFaultFau" +
            "lt", Name="InfocaseFault")]
        bool DeleteAssignmentFile(System.Guid assignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAssignmentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAssignmentFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteAssignmentFileAsync(System.Guid assignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePrivateProtocolFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePrivateProtocolFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePrivateProtocolFileInfocaseFau" +
            "ltFault", Name="InfocaseFault")]
        bool DeletePrivateProtocolFile(System.Guid hearingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePrivateProtocolFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePrivateProtocolFileResponse")]
        System.Threading.Tasks.Task<bool> DeletePrivateProtocolFileAsync(System.Guid hearingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePublicProtocolFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePublicProtocolFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePublicProtocolFileInfocaseFaul" +
            "tFault", Name="InfocaseFault")]
        bool DeletePublicProtocolFile(System.Guid hearingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePublicProtocolFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePublicProtocolFileResponse")]
        System.Threading.Tasks.Task<bool> DeletePublicProtocolFileAsync(System.Guid hearingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteIncomingDocumentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteIncomingDocumentFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteIncomingDocumentFileInfocaseFa" +
            "ultFault", Name="InfocaseFault")]
        bool DeleteIncomingDocumentFile(System.Guid incomingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteIncomingDocumentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteIncomingDocumentFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteIncomingDocumentFileAsync(System.Guid incomingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteOutgoingDocumentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteOutgoingDocumentFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteOutgoingDocumentFileInfocaseFa" +
            "ultFault", Name="InfocaseFault")]
        bool DeleteOutgoingDocumentFile(System.Guid outgoingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteOutgoingDocumentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteOutgoingDocumentFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteOutgoingDocumentFileAsync(System.Guid outgoingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteSummonFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteSummonFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteSummonFileInfocaseFaultFault", Name="InfocaseFault")]
        bool DeleteSummonFile(System.Guid summonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteSummonFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteSummonFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteSummonFileAsync(System.Guid summonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePrivateActFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePrivateActFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePrivateActFileInfocaseFaultFau" +
            "lt", Name="InfocaseFault")]
        bool DeletePrivateActFile(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePrivateActFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePrivateActFileResponse")]
        System.Threading.Tasks.Task<bool> DeletePrivateActFileAsync(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePublicActFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePublicActFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePublicActFileInfocaseFaultFaul" +
            "t", Name="InfocaseFault")]
        bool DeletePublicActFile(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePublicActFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePublicActFileResponse")]
        System.Threading.Tasks.Task<bool> DeletePublicActFileAsync(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePrivateMotiveFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePrivateMotiveFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePrivateMotiveFileInfocaseFault" +
            "Fault", Name="InfocaseFault")]
        bool DeletePrivateMotiveFile(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePrivateMotiveFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePrivateMotiveFileResponse")]
        System.Threading.Tasks.Task<bool> DeletePrivateMotiveFileAsync(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePublicMotiveFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePublicMotiveFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePublicMotiveFileInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        bool DeletePublicMotiveFile(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePublicMotiveFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeletePublicMotiveFileResponse")]
        System.Threading.Tasks.Task<bool> DeletePublicMotiveFileAsync(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentByIdInfocaseFault" +
            "Fault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.IncomingDocument GetIncomingDocumentById(System.Guid incomingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.IncomingDocument> GetIncomingDocumentByIdAsync(System.Guid incomingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentIdentifiersByCase" +
            "Id", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentIdentifiersByCase" +
            "IdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentIdentifiersByCase" +
            "IdInfocaseFaultFault", Name="InfocaseFault")]
        System.Guid[] GetIncomingDocumentIdentifiersByCaseId(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentIdentifiersByCase" +
            "Id", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentIdentifiersByCase" +
            "IdResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetIncomingDocumentIdentifiersByCaseIdAsync(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentByIdInfocaseFault" +
            "Fault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.OutgoingDocument GetOutgoingDocumentById(System.Guid outgoingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.OutgoingDocument> GetOutgoingDocumentByIdAsync(System.Guid outgoingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentIdentifiersByCase" +
            "Id", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentIdentifiersByCase" +
            "IdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentIdentifiersByCase" +
            "IdInfocaseFaultFault", Name="InfocaseFault")]
        System.Guid[] GetOutgoingDocumentIdentifiersByCaseId(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentIdentifiersByCase" +
            "Id", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentIdentifiersByCase" +
            "IdResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetOutgoingDocumentIdentifiersByCaseIdAsync(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseByIdInfocaseFaultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.Case GetCaseById(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Case> GetCaseByIdAsync(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetConnectedCaseById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetConnectedCaseByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetConnectedCaseByIdInfocaseFaultFau" +
            "lt", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.ConnectedCase GetConnectedCaseById(System.Guid connectedCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetConnectedCaseById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetConnectedCaseByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.ConnectedCase> GetConnectedCaseByIdAsync(System.Guid connectedCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetConnectedCaseIdentifiersByCaseId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetConnectedCaseIdentifiersByCaseIdR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetConnectedCaseIdentifiersByCaseIdI" +
            "nfocaseFaultFault", Name="InfocaseFault")]
        System.Guid[] GetConnectedCaseIdentifiersByCaseId(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetConnectedCaseIdentifiersByCaseId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetConnectedCaseIdentifiersByCaseIdR" +
            "esponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetConnectedCaseIdentifiersByCaseIdAsync(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetReporterById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetReporterByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetReporterByIdInfocaseFaultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.Reporter GetReporterById(System.Guid reporterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetReporterById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetReporterByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Reporter> GetReporterByIdAsync(System.Guid reporterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetReporterIdentifiersByCaseId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetReporterIdentifiersByCaseIdRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetReporterIdentifiersByCaseIdInfoca" +
            "seFaultFault", Name="InfocaseFault")]
        System.Guid[] GetReporterIdentifiersByCaseId(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetReporterIdentifiersByCaseId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetReporterIdentifiersByCaseIdRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Guid[]> GetReporterIdentifiersByCaseIdAsync(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentByIdInfocaseFaultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.Assignment GetAssignmentById(System.Guid assignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Assignment> GetAssignmentByIdAsync(System.Guid assignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentIdentifiersByCaseId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentIdentifiersByCaseIdResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentIdentifiersByCaseIdInfo" +
            "caseFaultFault", Name="InfocaseFault")]
        System.Guid[] GetAssignmentIdentifiersByCaseId(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentIdentifiersByCaseId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentIdentifiersByCaseIdResp" +
            "onse")]
        System.Threading.Tasks.Task<System.Guid[]> GetAssignmentIdentifiersByCaseIdAsync(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingByIdInfocaseFaultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.Hearing GetHearingById(System.Guid hearingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Hearing> GetHearingByIdAsync(System.Guid hearingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingIdentifiersByCaseId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingIdentifiersByCaseIdRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingIdentifiersByCaseIdInfocas" +
            "eFaultFault", Name="InfocaseFault")]
        System.Guid[] GetHearingIdentifiersByCaseId(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingIdentifiersByCaseId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingIdentifiersByCaseIdRespons" +
            "e")]
        System.Threading.Tasks.Task<System.Guid[]> GetHearingIdentifiersByCaseIdAsync(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingParticipantById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingParticipantByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingParticipantByIdInfocaseFau" +
            "ltFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.HearingParticipant GetHearingParticipantById(System.Guid hearingParticipantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingParticipantById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingParticipantByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.HearingParticipant> GetHearingParticipantByIdAsync(System.Guid hearingParticipantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingParticipantIdentifiersByHe" +
            "aringId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingParticipantIdentifiersByHe" +
            "aringIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingParticipantIdentifiersByHe" +
            "aringIdInfocaseFaultFault", Name="InfocaseFault")]
        System.Guid[] GetHearingParticipantIdentifiersByHearingId(System.Guid hearingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingParticipantIdentifiersByHe" +
            "aringId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetHearingParticipantIdentifiersByHe" +
            "aringIdResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetHearingParticipantIdentifiersByHearingIdAsync(System.Guid hearingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetActById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetActByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetActByIdInfocaseFaultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.Act GetActById(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetActById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetActByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Act> GetActByIdAsync(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetActIdentifiersByCaseId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetActIdentifiersByCaseIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetActIdentifiersByCaseIdInfocaseFau" +
            "ltFault", Name="InfocaseFault")]
        System.Guid[] GetActIdentifiersByCaseId(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetActIdentifiersByCaseId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetActIdentifiersByCaseIdResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetActIdentifiersByCaseIdAsync(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetActPreparatorById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetActPreparatorByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetActPreparatorByIdInfocaseFaultFau" +
            "lt", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.ActPreparator GetActPreparatorById(System.Guid actPreparatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetActPreparatorById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetActPreparatorByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.ActPreparator> GetActPreparatorByIdAsync(System.Guid actPreparatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetActPreparatorIdentifiersByActId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetActPreparatorIdentifiersByActIdRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetActPreparatorIdentifiersByActIdIn" +
            "focaseFaultFault", Name="InfocaseFault")]
        System.Guid[] GetActPreparatorIdentifiersByActId(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetActPreparatorIdentifiersByActId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetActPreparatorIdentifiersByActIdRe" +
            "sponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetActPreparatorIdentifiersByActIdAsync(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAppealById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAppealByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAppealByIdInfocaseFaultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.Appeal GetAppealById(System.Guid appealId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAppealById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAppealByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Appeal> GetAppealByIdAsync(System.Guid appealId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAppealIdentifiersByActId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAppealIdentifiersByActIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAppealIdentifiersByActIdInfocaseF" +
            "aultFault", Name="InfocaseFault")]
        System.Guid[] GetAppealIdentifiersByActId(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAppealIdentifiersByActId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAppealIdentifiersByActIdResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetAppealIdentifiersByActIdAsync(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseRulingById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseRulingByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseRulingByIdInfocaseFaultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.CaseRuling GetCaseRulingById(System.Guid caseRulingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseRulingById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseRulingByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.CaseRuling> GetCaseRulingByIdAsync(System.Guid caseRulingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseRulingIdentifiersByCaseId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseRulingIdentifiersByCaseIdResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseRulingIdentifiersByCaseIdInfo" +
            "caseFaultFault", Name="InfocaseFault")]
        System.Guid[] GetCaseRulingIdentifiersByCaseId(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseRulingIdentifiersByCaseId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseRulingIdentifiersByCaseIdResp" +
            "onse")]
        System.Threading.Tasks.Task<System.Guid[]> GetCaseRulingIdentifiersByCaseIdAsync(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSideById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetSideByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSideByIdInfocaseFaultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.Side GetSideById(System.Guid sideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSideById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetSideByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Side> GetSideByIdAsync(System.Guid sideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSideIdentifiersByCaseId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetSideIdentifiersByCaseIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSideIdentifiersByCaseIdInfocaseFa" +
            "ultFault", Name="InfocaseFault")]
        System.Guid[] GetSideIdentifiersByCaseId(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSideIdentifiersByCaseId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetSideIdentifiersByCaseIdResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetSideIdentifiersByCaseIdAsync(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerAssignmentById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerAssignmentByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerAssignmentByIdInfocaseFault" +
            "Fault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.LawyerAssignment GetLawyerAssignmentById(System.Guid lawyerAssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerAssignmentById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerAssignmentByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.LawyerAssignment> GetLawyerAssignmentByIdAsync(System.Guid lawyerAssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerAssignmentIdentifiersBySide" +
            "Id", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerAssignmentIdentifiersBySide" +
            "IdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerAssignmentIdentifiersBySide" +
            "IdInfocaseFaultFault", Name="InfocaseFault")]
        System.Guid[] GetLawyerAssignmentIdentifiersBySideId(System.Guid sideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerAssignmentIdentifiersBySide" +
            "Id", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerAssignmentIdentifiersBySide" +
            "IdResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetLawyerAssignmentIdentifiersBySideIdAsync(System.Guid sideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonAssignmentById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonAssignmentByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonAssignmentByIdInfocaseFault" +
            "Fault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.PersonAssignment GetPersonAssignmentById(System.Guid personAssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonAssignmentById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonAssignmentByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PersonAssignment> GetPersonAssignmentByIdAsync(System.Guid personAssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonAssignmentIdentifiersBySide" +
            "Id", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonAssignmentIdentifiersBySide" +
            "IdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonAssignmentIdentifiersBySide" +
            "IdInfocaseFaultFault", Name="InfocaseFault")]
        System.Guid[] GetPersonAssignmentIdentifiersBySideId(System.Guid sideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonAssignmentIdentifiersBySide" +
            "Id", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonAssignmentIdentifiersBySide" +
            "IdResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetPersonAssignmentIdentifiersBySideIdAsync(System.Guid sideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerRegistrationById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerRegistrationByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerRegistrationByIdInfocaseFau" +
            "ltFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.LawyerRegistration GetLawyerRegistrationById(System.Guid lawyerRegistrationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerRegistrationById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerRegistrationByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.LawyerRegistration> GetLawyerRegistrationByIdAsync(System.Guid lawyerRegistrationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerRegistrationIdentifiersByLa" +
            "wyerId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerRegistrationIdentifiersByLa" +
            "wyerIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerRegistrationIdentifiersByLa" +
            "wyerIdInfocaseFaultFault", Name="InfocaseFault")]
        System.Guid[] GetLawyerRegistrationIdentifiersByLawyerId(System.Guid lawyerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerRegistrationIdentifiersByLa" +
            "wyerId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerRegistrationIdentifiersByLa" +
            "wyerIdResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetLawyerRegistrationIdentifiersByLawyerIdAsync(System.Guid lawyerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonRegistrationById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonRegistrationByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonRegistrationByIdInfocaseFau" +
            "ltFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.PersonRegistration GetPersonRegistrationById(System.Guid personRegistrationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonRegistrationById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonRegistrationByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PersonRegistration> GetPersonRegistrationByIdAsync(System.Guid personRegistrationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonRegistrationIdentifierByPer" +
            "sonAssignmentId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonRegistrationIdentifierByPer" +
            "sonAssignmentIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonRegistrationIdentifierByPer" +
            "sonAssignmentIdInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> GetPersonRegistrationIdentifierByPersonAssignmentId(System.Guid personassignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonRegistrationIdentifierByPer" +
            "sonAssignmentId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPersonRegistrationIdentifierByPer" +
            "sonAssignmentIdResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetPersonRegistrationIdentifierByPersonAssignmentIdAsync(System.Guid personassignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonByIdInfocaseFaultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.Summon GetSummonById(System.Guid summonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Summon> GetSummonByIdAsync(System.Guid summonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonIdentifiersByParentId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonIdentifiersByParentIdRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonIdentifiersByParentIdInfoca" +
            "seFaultFault", Name="InfocaseFault")]
        System.Guid[] GetSummonIdentifiersByParentId(System.Guid parentId, string summonTypeCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonIdentifiersByParentId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonIdentifiersByParentIdRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Guid[]> GetSummonIdentifiersByParentIdAsync(System.Guid parentId, string summonTypeCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetScannedDocumentById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetScannedDocumentByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetScannedDocumentByIdInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.ScannedDocument GetScannedDocumentById(System.Guid scannedDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetScannedDocumentById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetScannedDocumentByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.ScannedDocument> GetScannedDocumentByIdAsync(System.Guid scannedDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetScannedDocumentIdentifiersByCaseI" +
            "d", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetScannedDocumentIdentifiersByCaseI" +
            "dResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetScannedDocumentIdentifiersByCaseI" +
            "dInfocaseFaultFault", Name="InfocaseFault")]
        System.Guid[] GetScannedDocumentIdentifiersByCaseId(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetScannedDocumentIdentifiersByCaseI" +
            "d", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetScannedDocumentIdentifiersByCaseI" +
            "dResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetScannedDocumentIdentifiersByCaseIdAsync(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentFileByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentFileByIdInfocaseFaultFa" +
            "ult", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.AssignmentFile GetAssignmentFileById(System.Guid assignmentFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentFileByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.AssignmentFile> GetAssignmentFileByIdAsync(System.Guid assignmentFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentFileIdentifiersByAssign" +
            "mentId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentFileIdentifiersByAssign" +
            "mentIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentFileIdentifiersByAssign" +
            "mentIdInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> GetAssignmentFileIdentifiersByAssignmentId(System.Guid assignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentFileIdentifiersByAssign" +
            "mentId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAssignmentFileIdentifiersByAssign" +
            "mentIdResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetAssignmentFileIdentifiersByAssignmentIdAsync(System.Guid assignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateProtocolFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateProtocolFileByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateProtocolFileByIdInfocaseFa" +
            "ultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.PrivateProtocolFile GetPrivateProtocolFileById(System.Guid privateProtocolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateProtocolFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateProtocolFileByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PrivateProtocolFile> GetPrivateProtocolFileByIdAsync(System.Guid privateProtocolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateProtocolFileIdentifierByHe" +
            "aringId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateProtocolFileIdentifierByHe" +
            "aringIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateProtocolFileIdentifierByHe" +
            "aringIdInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> GetPrivateProtocolFileIdentifierByHearingId(System.Guid hearingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateProtocolFileIdentifierByHe" +
            "aringId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateProtocolFileIdentifierByHe" +
            "aringIdResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetPrivateProtocolFileIdentifierByHearingIdAsync(System.Guid hearingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicProtocolFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicProtocolFileByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicProtocolFileByIdInfocaseFau" +
            "ltFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.PublicProtocolFile GetPublicProtocolFileById(System.Guid publicProtocolFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicProtocolFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicProtocolFileByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PublicProtocolFile> GetPublicProtocolFileByIdAsync(System.Guid publicProtocolFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicProtocolFileIdentifierByHea" +
            "ringId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicProtocolFileIdentifierByHea" +
            "ringIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicProtocolFileIdentifierByHea" +
            "ringIdInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> GetPublicProtocolFileIdentifierByHearingId(System.Guid hearingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicProtocolFileIdentifierByHea" +
            "ringId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicProtocolFileIdentifierByHea" +
            "ringIdResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetPublicProtocolFileIdentifierByHearingIdAsync(System.Guid hearingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentFileByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentFileByIdInfocaseF" +
            "aultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.IncomingDocumentFile GetIncomingDocumentFileById(System.Guid incomingDocumentFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentFileByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.IncomingDocumentFile> GetIncomingDocumentFileByIdAsync(System.Guid incomingDocumentFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentFileIdentifierByI" +
            "ncomingDocumentId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentFileIdentifierByI" +
            "ncomingDocumentIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentFileIdentifierByI" +
            "ncomingDocumentIdInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> GetIncomingDocumentFileIdentifierByIncomingDocumentId(System.Guid incomingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentFileIdentifierByI" +
            "ncomingDocumentId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetIncomingDocumentFileIdentifierByI" +
            "ncomingDocumentIdResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetIncomingDocumentFileIdentifierByIncomingDocumentIdAsync(System.Guid incomingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentFileByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentFileByIdInfocaseF" +
            "aultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.OutgoingDocumentFile GetOutgoingDocumentFileById(System.Guid outgoingDocumentFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentFileByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.OutgoingDocumentFile> GetOutgoingDocumentFileByIdAsync(System.Guid outgoingDocumentFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentFileIdentifierByO" +
            "utgoingDocumentId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentFileIdentifierByO" +
            "utgoingDocumentIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentFileIdentifierByO" +
            "utgoingDocumentIdInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> GetOutgoingDocumentFileIdentifierByOutgoingDocumentId(System.Guid outgoingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentFileIdentifierByO" +
            "utgoingDocumentId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetOutgoingDocumentFileIdentifierByO" +
            "utgoingDocumentIdResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetOutgoingDocumentFileIdentifierByOutgoingDocumentIdAsync(System.Guid outgoingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonFileByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonFileByIdInfocaseFaultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.SummonFile GetSummonFileById(System.Guid summonFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonFileByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.SummonFile> GetSummonFileByIdAsync(System.Guid summonFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonFileIdentifierBySummonId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonFileIdentifierBySummonIdRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonFileIdentifierBySummonIdInf" +
            "ocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> GetSummonFileIdentifierBySummonId(System.Guid summonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonFileIdentifierBySummonId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonFileIdentifierBySummonIdRes" +
            "ponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetSummonFileIdentifierBySummonIdAsync(System.Guid summonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateActFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateActFileByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateActFileByIdInfocaseFaultFa" +
            "ult", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.PrivateActFile GetPrivateActFileById(System.Guid privateActFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateActFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateActFileByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PrivateActFile> GetPrivateActFileByIdAsync(System.Guid privateActFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateActFileIdentifiersByActId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateActFileIdentifiersByActIdR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateActFileIdentifiersByActIdI" +
            "nfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> GetPrivateActFileIdentifiersByActId(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateActFileIdentifiersByActId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateActFileIdentifiersByActIdR" +
            "esponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetPrivateActFileIdentifiersByActIdAsync(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicActFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicActFileByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicActFileByIdInfocaseFaultFau" +
            "lt", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.PublicActFile GetPublicActFileById(System.Guid publicActFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicActFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicActFileByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PublicActFile> GetPublicActFileByIdAsync(System.Guid publicActFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicActFileIdentifierByActId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicActFileIdentifierByActIdRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicActFileIdentifierByActIdInf" +
            "ocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> GetPublicActFileIdentifierByActId(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicActFileIdentifierByActId", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicActFileIdentifierByActIdRes" +
            "ponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetPublicActFileIdentifierByActIdAsync(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateMotiveFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateMotiveFileByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateMotiveFileByIdInfocaseFaul" +
            "tFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.PrivateMotiveFile GetPrivateMotiveFileById(System.Guid privateMotiveFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateMotiveFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateMotiveFileByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PrivateMotiveFile> GetPrivateMotiveFileByIdAsync(System.Guid privateMotiveFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateMotiveFileIdentifierByActI" +
            "d", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateMotiveFileIdentifierByActI" +
            "dResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateMotiveFileIdentifierByActI" +
            "dInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> GetPrivateMotiveFileIdentifierByActId(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateMotiveFileIdentifierByActI" +
            "d", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPrivateMotiveFileIdentifierByActI" +
            "dResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetPrivateMotiveFileIdentifierByActIdAsync(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicMotiveFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicMotiveFileByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicMotiveFileByIdInfocaseFault" +
            "Fault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.PublicMotiveFile GetPublicMotiveFileById(System.Guid publicActFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicMotiveFileById", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicMotiveFileByIdResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PublicMotiveFile> GetPublicMotiveFileByIdAsync(System.Guid publicActFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicMotiveFileIdentifierByActId" +
            "", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicMotiveFileIdentifierByActId" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicMotiveFileIdentifierByActId" +
            "InfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> GetPublicMotiveFileIdentifierByActId(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicMotiveFileIdentifierByActId" +
            "", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetPublicMotiveFileIdentifierByActId" +
            "Response")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetPublicMotiveFileIdentifierByActIdAsync(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertIncomingDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertIncomingDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertIncomingDocumentInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertIncomingDocument(eCase.Service.Client.eCaseService.IncomingDocument incomingDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertIncomingDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertIncomingDocumentResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertIncomingDocumentAsync(eCase.Service.Client.eCaseService.IncomingDocument incomingDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateIncomingDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateIncomingDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateIncomingDocumentInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateIncomingDocument(eCase.Service.Client.eCaseService.IncomingDocument incomingDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateIncomingDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateIncomingDocumentResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateIncomingDocumentAsync(eCase.Service.Client.eCaseService.IncomingDocument incomingDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertIncomingDocumentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertIncomingDocumentFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertIncomingDocumentFileInfocaseFa" +
            "ultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertIncomingDocumentFile(eCase.Service.Client.eCaseService.IncomingDocumentFile incomingDocumentFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertIncomingDocumentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertIncomingDocumentFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertIncomingDocumentFileAsync(eCase.Service.Client.eCaseService.IncomingDocumentFile incomingDocumentFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateIncomingDocumentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateIncomingDocumentFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateIncomingDocumentFileInfocaseFa" +
            "ultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateIncomingDocumentFile(eCase.Service.Client.eCaseService.IncomingDocumentFile incomingDocumentFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateIncomingDocumentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateIncomingDocumentFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateIncomingDocumentFileAsync(eCase.Service.Client.eCaseService.IncomingDocumentFile incomingDocumentFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertOutgoingDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertOutgoingDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertOutgoingDocumentInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertOutgoingDocument(eCase.Service.Client.eCaseService.OutgoingDocument outgoingDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertOutgoingDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertOutgoingDocumentResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertOutgoingDocumentAsync(eCase.Service.Client.eCaseService.OutgoingDocument outgoingDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateOutgoingDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateOutgoingDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateOutgoingDocumentInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateOutgoingDocument(eCase.Service.Client.eCaseService.OutgoingDocument outgoingDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateOutgoingDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateOutgoingDocumentResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateOutgoingDocumentAsync(eCase.Service.Client.eCaseService.OutgoingDocument outgoingDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertOutgoingDocumentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertOutgoingDocumentFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertOutgoingDocumentFileInfocaseFa" +
            "ultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertOutgoingDocumentFile(eCase.Service.Client.eCaseService.OutgoingDocumentFile outgoingDocumentFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertOutgoingDocumentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertOutgoingDocumentFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertOutgoingDocumentFileAsync(eCase.Service.Client.eCaseService.OutgoingDocumentFile outgoingDocumentFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateOutgoingDocumentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateOutgoingDocumentFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateOutgoingDocumentFileInfocaseFa" +
            "ultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateOutgoingDocumentFile(eCase.Service.Client.eCaseService.OutgoingDocumentFile outgoingDocumentFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateOutgoingDocumentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateOutgoingDocumentFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateOutgoingDocumentFileAsync(eCase.Service.Client.eCaseService.OutgoingDocumentFile outgoingDocumentFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertCase", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertCaseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertCaseInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertCase(eCase.Service.Client.eCaseService.Case c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertCase", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertCaseResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertCaseAsync(eCase.Service.Client.eCaseService.Case c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateCase", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateCaseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateCaseInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateCase(eCase.Service.Client.eCaseService.Case c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateCase", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateCaseResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateCaseAsync(eCase.Service.Client.eCaseService.Case c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertConnectedCase", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertConnectedCaseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertConnectedCaseInfocaseFaultFaul" +
            "t", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertConnectedCase(eCase.Service.Client.eCaseService.ConnectedCase connectedCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertConnectedCase", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertConnectedCaseResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertConnectedCaseAsync(eCase.Service.Client.eCaseService.ConnectedCase connectedCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateConnectedCase", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateConnectedCaseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateConnectedCaseInfocaseFaultFaul" +
            "t", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateConnectedCase(eCase.Service.Client.eCaseService.ConnectedCase connectedCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateConnectedCase", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateConnectedCaseResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateConnectedCaseAsync(eCase.Service.Client.eCaseService.ConnectedCase connectedCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertReporter", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertReporterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertReporterInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertReporter(eCase.Service.Client.eCaseService.Reporter reporter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertReporter", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertReporterResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertReporterAsync(eCase.Service.Client.eCaseService.Reporter reporter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateReporter", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateReporterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateReporterInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateReporter(eCase.Service.Client.eCaseService.Reporter reporter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateReporter", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateReporterResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateReporterAsync(eCase.Service.Client.eCaseService.Reporter reporter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAssignmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAssignmentInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertAssignment(eCase.Service.Client.eCaseService.Assignment assignment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAssignmentResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertAssignmentAsync(eCase.Service.Client.eCaseService.Assignment assignment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAssignmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAssignmentInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateAssignment(eCase.Service.Client.eCaseService.Assignment assignment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAssignmentResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateAssignmentAsync(eCase.Service.Client.eCaseService.Assignment assignment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAssignmentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAssignmentFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAssignmentFileInfocaseFaultFau" +
            "lt", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertAssignmentFile(eCase.Service.Client.eCaseService.AssignmentFile assignmentFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAssignmentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAssignmentFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertAssignmentFileAsync(eCase.Service.Client.eCaseService.AssignmentFile assignmentFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAssignmentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAssignmentFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAssignmentFileInfocaseFaultFau" +
            "lt", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateAssignmentFile(eCase.Service.Client.eCaseService.AssignmentFile assignmentFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAssignmentFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAssignmentFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateAssignmentFileAsync(eCase.Service.Client.eCaseService.AssignmentFile assignmentFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertHearing", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertHearingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertHearingInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertHearing(eCase.Service.Client.eCaseService.Hearing hearing);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertHearing", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertHearingResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertHearingAsync(eCase.Service.Client.eCaseService.Hearing hearing);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateHearing", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateHearingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateHearingInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateHearing(eCase.Service.Client.eCaseService.Hearing hearing);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateHearing", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateHearingResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateHearingAsync(eCase.Service.Client.eCaseService.Hearing hearing);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPrivateProtocolFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPrivateProtocolFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPrivateProtocolFileInfocaseFau" +
            "ltFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertPrivateProtocolFile(eCase.Service.Client.eCaseService.PrivateProtocolFile privateProtocolFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPrivateProtocolFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPrivateProtocolFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPrivateProtocolFileAsync(eCase.Service.Client.eCaseService.PrivateProtocolFile privateProtocolFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePrivateProtocolFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePrivateProtocolFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePrivateProtocolFileInfocaseFau" +
            "ltFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdatePrivateProtocolFile(eCase.Service.Client.eCaseService.PrivateProtocolFile privateProtocolFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePrivateProtocolFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePrivateProtocolFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdatePrivateProtocolFileAsync(eCase.Service.Client.eCaseService.PrivateProtocolFile privateProtocolFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPublicProtocolFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPublicProtocolFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPublicProtocolFileInfocaseFaul" +
            "tFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertPublicProtocolFile(eCase.Service.Client.eCaseService.PublicProtocolFile publicProtocolFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPublicProtocolFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPublicProtocolFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPublicProtocolFileAsync(eCase.Service.Client.eCaseService.PublicProtocolFile publicProtocolFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePublicProtocolFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePublicProtocolFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePublicProtocolFileInfocaseFaul" +
            "tFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdatePublicProtocolFile(eCase.Service.Client.eCaseService.PublicProtocolFile publicProtocolFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePublicProtocolFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePublicProtocolFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdatePublicProtocolFileAsync(eCase.Service.Client.eCaseService.PublicProtocolFile publicProtocolFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertHearingParticipant", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertHearingParticipantResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertHearingParticipantInfocaseFaul" +
            "tFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertHearingParticipant(eCase.Service.Client.eCaseService.HearingParticipant hearingParticipant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertHearingParticipant", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertHearingParticipantResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertHearingParticipantAsync(eCase.Service.Client.eCaseService.HearingParticipant hearingParticipant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateHearingParticipant", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateHearingParticipantResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateHearingParticipantInfocaseFaul" +
            "tFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateHearingParticipant(eCase.Service.Client.eCaseService.HearingParticipant hearingParticipant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateHearingParticipant", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateHearingParticipantResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateHearingParticipantAsync(eCase.Service.Client.eCaseService.HearingParticipant hearingParticipant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAct", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertActResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertActInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertAct(eCase.Service.Client.eCaseService.Act act);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAct", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertActResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertActAsync(eCase.Service.Client.eCaseService.Act act);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAct", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateActResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateActInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateAct(eCase.Service.Client.eCaseService.Act act);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAct", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateActResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateActAsync(eCase.Service.Client.eCaseService.Act act);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPublicActFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPublicActFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPublicActFileInfocaseFaultFaul" +
            "t", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertPublicActFile(eCase.Service.Client.eCaseService.PublicActFile publicActFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPublicActFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPublicActFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPublicActFileAsync(eCase.Service.Client.eCaseService.PublicActFile publicActFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePublicActFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePublicActFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePublicActFileInfocaseFaultFaul" +
            "t", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdatePublicActFile(eCase.Service.Client.eCaseService.PublicActFile publicActFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePublicActFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePublicActFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdatePublicActFileAsync(eCase.Service.Client.eCaseService.PublicActFile publicActFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPrivateActFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPrivateActFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPrivateActFileInfocaseFaultFau" +
            "lt", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertPrivateActFile(eCase.Service.Client.eCaseService.PrivateActFile privateActFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPrivateActFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPrivateActFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPrivateActFileAsync(eCase.Service.Client.eCaseService.PrivateActFile privateActFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePrivateActFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePrivateActFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePrivateActFileInfocaseFaultFau" +
            "lt", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdatePrivateActFile(eCase.Service.Client.eCaseService.PrivateActFile privateActFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePrivateActFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePrivateActFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdatePrivateActFileAsync(eCase.Service.Client.eCaseService.PrivateActFile privateActFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPublicMotiveFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPublicMotiveFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPublicMotiveFileInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertPublicMotiveFile(eCase.Service.Client.eCaseService.PublicMotiveFile publicMotiveFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPublicMotiveFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPublicMotiveFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPublicMotiveFileAsync(eCase.Service.Client.eCaseService.PublicMotiveFile publicMotiveFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePublicMotiveFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePublicMotiveFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePublicMotiveFileInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdatePublicMotiveFile(eCase.Service.Client.eCaseService.PublicMotiveFile publicMotiveFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePublicMotiveFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePublicMotiveFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdatePublicMotiveFileAsync(eCase.Service.Client.eCaseService.PublicMotiveFile publicMotiveFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPrivateMotiveFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPrivateMotiveFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPrivateMotiveFileInfocaseFault" +
            "Fault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertPrivateMotiveFile(eCase.Service.Client.eCaseService.PrivateMotiveFile privateMotiveFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPrivateMotiveFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPrivateMotiveFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPrivateMotiveFileAsync(eCase.Service.Client.eCaseService.PrivateMotiveFile privateMotiveFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePrivateMotiveFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePrivateMotiveFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePrivateMotiveFileInfocaseFault" +
            "Fault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdatePrivateMotiveFile(eCase.Service.Client.eCaseService.PrivateMotiveFile privateMotiveFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePrivateMotiveFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePrivateMotiveFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdatePrivateMotiveFileAsync(eCase.Service.Client.eCaseService.PrivateMotiveFile privateMotiveFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertActPreparator", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertActPreparatorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertActPreparatorInfocaseFaultFaul" +
            "t", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertActPreparator(eCase.Service.Client.eCaseService.ActPreparator actPreparator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertActPreparator", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertActPreparatorResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertActPreparatorAsync(eCase.Service.Client.eCaseService.ActPreparator actPreparator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateActPreparator", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateActPreparatorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateActPreparatorInfocaseFaultFaul" +
            "t", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateActPreparator(eCase.Service.Client.eCaseService.ActPreparator actPreparator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateActPreparator", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateActPreparatorResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateActPreparatorAsync(eCase.Service.Client.eCaseService.ActPreparator actPreparator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAppeal", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAppealResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAppealInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertAppeal(eCase.Service.Client.eCaseService.Appeal appeal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAppeal", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertAppealResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertAppealAsync(eCase.Service.Client.eCaseService.Appeal appeal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAppeal", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAppealResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAppealInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateAppeal(eCase.Service.Client.eCaseService.Appeal appeal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAppeal", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateAppealResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateAppealAsync(eCase.Service.Client.eCaseService.Appeal appeal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertCaseRuling", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertCaseRulingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertCaseRulingInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertCaseRuling(eCase.Service.Client.eCaseService.CaseRuling caseRuling);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertCaseRuling", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertCaseRulingResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertCaseRulingAsync(eCase.Service.Client.eCaseService.CaseRuling caseRuling);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateCaseRuling", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateCaseRulingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateCaseRulingInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateCaseRuling(eCase.Service.Client.eCaseService.CaseRuling caseRuling);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateCaseRuling", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateCaseRulingResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateCaseRulingAsync(eCase.Service.Client.eCaseService.CaseRuling caseRuling);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertSide", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertSideResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertSideInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertSide(eCase.Service.Client.eCaseService.Side side);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertSide", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertSideResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertSideAsync(eCase.Service.Client.eCaseService.Side side);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateSide", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateSideResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateSideInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateSide(eCase.Service.Client.eCaseService.Side side);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateSide", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateSideResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateSideAsync(eCase.Service.Client.eCaseService.Side side);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertLawyerAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertLawyerAssignmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertLawyerAssignmentInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertLawyerAssignment(eCase.Service.Client.eCaseService.LawyerAssignment lawyerAssignment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertLawyerAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertLawyerAssignmentResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertLawyerAssignmentAsync(eCase.Service.Client.eCaseService.LawyerAssignment lawyerAssignment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateLawyerAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateLawyerAssignmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateLawyerAssignmentInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateLawyerAssignment(eCase.Service.Client.eCaseService.LawyerAssignment lawyerAssignment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateLawyerAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateLawyerAssignmentResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateLawyerAssignmentAsync(eCase.Service.Client.eCaseService.LawyerAssignment lawyerAssignment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertSummon", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertSummonResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertSummonInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertSummon(eCase.Service.Client.eCaseService.Summon summon, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertSummon", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertSummonResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertSummonAsync(eCase.Service.Client.eCaseService.Summon summon, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateSummon", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateSummonResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateSummonInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateSummon(eCase.Service.Client.eCaseService.Summon summon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateSummon", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateSummonResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateSummonAsync(eCase.Service.Client.eCaseService.Summon summon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertSummonFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertSummonFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertSummonFileInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertSummonFile(eCase.Service.Client.eCaseService.SummonFile summonFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertSummonFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertSummonFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertSummonFileAsync(eCase.Service.Client.eCaseService.SummonFile summonFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateSummonFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateSummonFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateSummonFileInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateSummonFile(eCase.Service.Client.eCaseService.SummonFile summonFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateSummonFile", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateSummonFileResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateSummonFileAsync(eCase.Service.Client.eCaseService.SummonFile summonFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAllLawyers", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAllLawyersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAllLawyersInfocaseFaultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.Lawyer[] GetAllLawyers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAllLawyers", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAllLawyersResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Lawyer[]> GetAllLawyersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAllNewLawyers", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAllNewLawyersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAllNewLawyersInfocaseFaultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.Lawyer[] GetAllNewLawyers(System.DateTime from);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAllNewLawyers", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAllNewLawyersResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Lawyer[]> GetAllNewLawyersAsync(System.DateTime from);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerByNumber", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerByNumberResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerByNumberInfocaseFaultFault", Name="InfocaseFault")]
        eCase.Service.Client.eCaseService.Lawyer GetLawyerByNumber(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerByNumber", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetLawyerByNumberResponse")]
        System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Lawyer> GetLawyerByNumberAsync(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAllReadSummons", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAllReadSummonsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAllReadSummonsInfocaseFaultFault", Name="InfocaseFault")]
        System.Tuple<System.Guid, System.DateTime>[] GetAllReadSummons();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetAllReadSummons", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetAllReadSummonsResponse")]
        System.Threading.Tasks.Task<System.Tuple<System.Guid, System.DateTime>[]> GetAllReadSummonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetReadSummonsForCertainDay", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetReadSummonsForCertainDayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetReadSummonsForCertainDayInfocaseF" +
            "aultFault", Name="InfocaseFault")]
        System.Guid[] GetReadSummonsForCertainDay(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetReadSummonsForCertainDay", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetReadSummonsForCertainDayResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetReadSummonsForCertainDayAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonReportDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonReportDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonReportDocumentInfocaseFault" +
            "Fault", Name="InfocaseFault")]
        byte[] GetSummonReportDocument(System.Guid summonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonReportDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetSummonReportDocumentResponse")]
        System.Threading.Tasks.Task<byte[]> GetSummonReportDocumentAsync(System.Guid summonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/ActivateSummonsAccess", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/ActivateSummonsAccessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/ActivateSummonsAccessInfocaseFaultFa" +
            "ult", Name="InfocaseFault")]
        void ActivateSummonsAccess(System.Guid userId, System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/ActivateSummonsAccess", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/ActivateSummonsAccessResponse")]
        System.Threading.Tasks.Task ActivateSummonsAccessAsync(System.Guid userId, System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeactivateSummonsAccess", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeactivateSummonsAccessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeactivateSummonsAccessInfocaseFault" +
            "Fault", Name="InfocaseFault")]
        void DeactivateSummonsAccess(System.Guid userId, System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeactivateSummonsAccess", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeactivateSummonsAccessResponse")]
        System.Threading.Tasks.Task DeactivateSummonsAccessAsync(System.Guid userId, System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPersonAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPersonAssignmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPersonAssignmentInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertPersonAssignment(eCase.Service.Client.eCaseService.PersonAssignment personAssignment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPersonAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPersonAssignmentResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPersonAssignmentAsync(eCase.Service.Client.eCaseService.PersonAssignment personAssignment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePersonAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePersonAssignmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePersonAssignmentInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdatePersonAssignment(eCase.Service.Client.eCaseService.PersonAssignment personAssignment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePersonAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdatePersonAssignmentResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdatePersonAssignmentAsync(eCase.Service.Client.eCaseService.PersonAssignment personAssignment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertScannedDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertScannedDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertScannedDocumentInfocaseFaultFa" +
            "ult", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertScannedDocument(eCase.Service.Client.eCaseService.ScannedDocument scannedDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertScannedDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertScannedDocumentResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertScannedDocumentAsync(eCase.Service.Client.eCaseService.ScannedDocument scannedDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateScannedDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateScannedDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateScannedDocumentInfocaseFaultFa" +
            "ult", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateScannedDocument(eCase.Service.Client.eCaseService.ScannedDocument scannedDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateScannedDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateScannedDocumentResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateScannedDocumentAsync(eCase.Service.Client.eCaseService.ScannedDocument scannedDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertLawyerRegistration", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertLawyerRegistrationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertLawyerRegistrationInfocaseFaul" +
            "tFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertLawyerRegistration(eCase.Service.Client.eCaseService.LawyerRegistration lawyerRegistration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertLawyerRegistration", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertLawyerRegistrationResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertLawyerRegistrationAsync(eCase.Service.Client.eCaseService.LawyerRegistration lawyerRegistration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/ActivateLawyerRegistration", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/ActivateLawyerRegistrationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/ActivateLawyerRegistrationInfocaseFa" +
            "ultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> ActivateLawyerRegistration(System.Guid lawyerRegistrationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/ActivateLawyerRegistration", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/ActivateLawyerRegistrationResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> ActivateLawyerRegistrationAsync(System.Guid lawyerRegistrationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeactivateLawyerRegistration", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeactivateLawyerRegistrationResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeactivateLawyerRegistrationInfocase" +
            "FaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> DeactivateLawyerRegistration(System.Guid lawyerRegistrationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeactivateLawyerRegistration", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeactivateLawyerRegistrationResponse" +
            "")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> DeactivateLawyerRegistrationAsync(System.Guid lawyerRegistrationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPersonRegistration", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPersonRegistrationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPersonRegistrationInfocaseFaul" +
            "tFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> InsertPersonRegistration(eCase.Service.Client.eCaseService.PersonRegistration personRegistration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPersonRegistration", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/InsertPersonRegistrationResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPersonRegistrationAsync(eCase.Service.Client.eCaseService.PersonRegistration personRegistration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/ActivatePersonRegistration", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/ActivatePersonRegistrationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/ActivatePersonRegistrationInfocaseFa" +
            "ultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> ActivatePersonRegistration(System.Guid personRegistrationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/ActivatePersonRegistration", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/ActivatePersonRegistrationResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> ActivatePersonRegistrationAsync(System.Guid personRegistrationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeactivatePersonRegistration", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeactivatePersonRegistrationResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeactivatePersonRegistrationInfocase" +
            "FaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> DeactivatePersonRegistration(System.Guid personRegistrationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeactivatePersonRegistration", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeactivatePersonRegistrationResponse" +
            "")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> DeactivatePersonRegistrationAsync(System.Guid personRegistrationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateUsername", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateUsernameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateUsernameInfocaseFaultFault", Name="InfocaseFault")]
        System.Nullable<System.Guid> UpdateUsername(string oldUsername, string newUsername, string courtCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateUsername", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/UpdateUsernameResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateUsernameAsync(string oldUsername, string newUsername, string courtCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseIdentifiers", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseIdentifiersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseIdentifiersInfocaseFaultFault" +
            "", Name="InfocaseFault")]
        System.Guid[] GetCaseIdentifiers(System.Nullable<int> caseNumber, string caseKindCode, System.Nullable<int> caseYear, string department);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseIdentifiers", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/GetCaseIdentifiersResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetCaseIdentifiersAsync(System.Nullable<int> caseNumber, string caseKindCode, System.Nullable<int> caseYear, string department);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteIncomingDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteIncomingDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteIncomingDocumentInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        bool DeleteIncomingDocument(System.Guid incomingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteIncomingDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteIncomingDocumentResponse")]
        System.Threading.Tasks.Task<bool> DeleteIncomingDocumentAsync(System.Guid incomingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteOutgoingDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteOutgoingDocumentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteOutgoingDocumentInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        bool DeleteOutgoingDocument(System.Guid outgoingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteOutgoingDocument", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteOutgoingDocumentResponse")]
        System.Threading.Tasks.Task<bool> DeleteOutgoingDocumentAsync(System.Guid outgoingDocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteCase", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteCaseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteCaseInfocaseFaultFault", Name="InfocaseFault")]
        bool DeleteCase(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteCase", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteCaseResponse")]
        System.Threading.Tasks.Task<bool> DeleteCaseAsync(System.Guid caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteConnectedCase", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteConnectedCaseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteConnectedCaseInfocaseFaultFaul" +
            "t", Name="InfocaseFault")]
        bool DeleteConnectedCase(System.Guid connectedCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteConnectedCase", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteConnectedCaseResponse")]
        System.Threading.Tasks.Task<bool> DeleteConnectedCaseAsync(System.Guid connectedCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteReporter", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteReporterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteReporterInfocaseFaultFault", Name="InfocaseFault")]
        bool DeleteReporter(System.Guid reporterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteReporter", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteReporterResponse")]
        System.Threading.Tasks.Task<bool> DeleteReporterAsync(System.Guid reporterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAssignmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAssignmentInfocaseFaultFault", Name="InfocaseFault")]
        bool DeleteAssignment(System.Guid assignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAssignmentResponse")]
        System.Threading.Tasks.Task<bool> DeleteAssignmentAsync(System.Guid assignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteHearing", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteHearingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteHearingInfocaseFaultFault", Name="InfocaseFault")]
        bool DeleteHearing(System.Guid hearingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteHearing", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteHearingResponse")]
        System.Threading.Tasks.Task<bool> DeleteHearingAsync(System.Guid hearingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteHearingParticipant", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteHearingParticipantResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteHearingParticipantInfocaseFaul" +
            "tFault", Name="InfocaseFault")]
        bool DeleteHearingParticipant(System.Guid hearingParticipantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteHearingParticipant", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteHearingParticipantResponse")]
        System.Threading.Tasks.Task<bool> DeleteHearingParticipantAsync(System.Guid hearingParticipantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAct", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteActResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteActInfocaseFaultFault", Name="InfocaseFault")]
        bool DeleteAct(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAct", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteActResponse")]
        System.Threading.Tasks.Task<bool> DeleteActAsync(System.Guid actId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteActPreparator", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteActPreparatorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteActPreparatorInfocaseFaultFaul" +
            "t", Name="InfocaseFault")]
        bool DeleteActPreparator(System.Guid actPreparatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteActPreparator", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteActPreparatorResponse")]
        System.Threading.Tasks.Task<bool> DeleteActPreparatorAsync(System.Guid actPreparatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAppeal", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAppealResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAppealInfocaseFaultFault", Name="InfocaseFault")]
        bool DeleteAppeal(System.Guid appealId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAppeal", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteAppealResponse")]
        System.Threading.Tasks.Task<bool> DeleteAppealAsync(System.Guid appealId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteCaseRuling", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteCaseRulingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteCaseRulingInfocaseFaultFault", Name="InfocaseFault")]
        bool DeleteCaseRuling(System.Guid caseRulingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteCaseRuling", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteCaseRulingResponse")]
        System.Threading.Tasks.Task<bool> DeleteCaseRulingAsync(System.Guid caseRulingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteSide", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteSideResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteSideInfocaseFaultFault", Name="InfocaseFault")]
        bool DeleteSide(System.Guid sideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteSide", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteSideResponse")]
        System.Threading.Tasks.Task<bool> DeleteSideAsync(System.Guid sideId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteLawyerAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteLawyerAssignmentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteLawyerAssignmentInfocaseFaultF" +
            "ault", Name="InfocaseFault")]
        bool DeleteLawyerAssignment(System.Guid lawyerAssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteLawyerAssignment", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteLawyerAssignmentResponse")]
        System.Threading.Tasks.Task<bool> DeleteLawyerAssignmentAsync(System.Guid lawyerAssignmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteSummon", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteSummonResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(eCase.Service.Client.eCaseService.InfocaseFault), Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteSummonInfocaseFaultFault", Name="InfocaseFault")]
        bool DeleteSummon(System.Guid summonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteSummon", ReplyAction="http://www.abbaty.com/eCase/v2/IeCaseService/DeleteSummonResponse")]
        System.Threading.Tasks.Task<bool> DeleteSummonAsync(System.Guid summonId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IeCaseServiceChannel : eCase.Service.Client.eCaseService.IeCaseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IeCaseServiceClient : System.ServiceModel.ClientBase<eCase.Service.Client.eCaseService.IeCaseService>, eCase.Service.Client.eCaseService.IeCaseService {
        
        public IeCaseServiceClient() {
        }
        
        public IeCaseServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IeCaseServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IeCaseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IeCaseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool DeletePersonAssignment(System.Guid personAssignmentId) {
            return base.Channel.DeletePersonAssignment(personAssignmentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePersonAssignmentAsync(System.Guid personAssignmentId) {
            return base.Channel.DeletePersonAssignmentAsync(personAssignmentId);
        }
        
        public bool DeleteScannedDocument(System.Guid scannedDocumentId) {
            return base.Channel.DeleteScannedDocument(scannedDocumentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteScannedDocumentAsync(System.Guid scannedDocumentId) {
            return base.Channel.DeleteScannedDocumentAsync(scannedDocumentId);
        }
        
        public bool DeleteAssignmentFile(System.Guid assignmentId) {
            return base.Channel.DeleteAssignmentFile(assignmentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAssignmentFileAsync(System.Guid assignmentId) {
            return base.Channel.DeleteAssignmentFileAsync(assignmentId);
        }
        
        public bool DeletePrivateProtocolFile(System.Guid hearingId) {
            return base.Channel.DeletePrivateProtocolFile(hearingId);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePrivateProtocolFileAsync(System.Guid hearingId) {
            return base.Channel.DeletePrivateProtocolFileAsync(hearingId);
        }
        
        public bool DeletePublicProtocolFile(System.Guid hearingId) {
            return base.Channel.DeletePublicProtocolFile(hearingId);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePublicProtocolFileAsync(System.Guid hearingId) {
            return base.Channel.DeletePublicProtocolFileAsync(hearingId);
        }
        
        public bool DeleteIncomingDocumentFile(System.Guid incomingDocumentId) {
            return base.Channel.DeleteIncomingDocumentFile(incomingDocumentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteIncomingDocumentFileAsync(System.Guid incomingDocumentId) {
            return base.Channel.DeleteIncomingDocumentFileAsync(incomingDocumentId);
        }
        
        public bool DeleteOutgoingDocumentFile(System.Guid outgoingDocumentId) {
            return base.Channel.DeleteOutgoingDocumentFile(outgoingDocumentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteOutgoingDocumentFileAsync(System.Guid outgoingDocumentId) {
            return base.Channel.DeleteOutgoingDocumentFileAsync(outgoingDocumentId);
        }
        
        public bool DeleteSummonFile(System.Guid summonId) {
            return base.Channel.DeleteSummonFile(summonId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSummonFileAsync(System.Guid summonId) {
            return base.Channel.DeleteSummonFileAsync(summonId);
        }
        
        public bool DeletePrivateActFile(System.Guid actId) {
            return base.Channel.DeletePrivateActFile(actId);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePrivateActFileAsync(System.Guid actId) {
            return base.Channel.DeletePrivateActFileAsync(actId);
        }
        
        public bool DeletePublicActFile(System.Guid actId) {
            return base.Channel.DeletePublicActFile(actId);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePublicActFileAsync(System.Guid actId) {
            return base.Channel.DeletePublicActFileAsync(actId);
        }
        
        public bool DeletePrivateMotiveFile(System.Guid actId) {
            return base.Channel.DeletePrivateMotiveFile(actId);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePrivateMotiveFileAsync(System.Guid actId) {
            return base.Channel.DeletePrivateMotiveFileAsync(actId);
        }
        
        public bool DeletePublicMotiveFile(System.Guid actId) {
            return base.Channel.DeletePublicMotiveFile(actId);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePublicMotiveFileAsync(System.Guid actId) {
            return base.Channel.DeletePublicMotiveFileAsync(actId);
        }
        
        public eCase.Service.Client.eCaseService.IncomingDocument GetIncomingDocumentById(System.Guid incomingDocumentId) {
            return base.Channel.GetIncomingDocumentById(incomingDocumentId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.IncomingDocument> GetIncomingDocumentByIdAsync(System.Guid incomingDocumentId) {
            return base.Channel.GetIncomingDocumentByIdAsync(incomingDocumentId);
        }
        
        public System.Guid[] GetIncomingDocumentIdentifiersByCaseId(System.Guid caseId) {
            return base.Channel.GetIncomingDocumentIdentifiersByCaseId(caseId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetIncomingDocumentIdentifiersByCaseIdAsync(System.Guid caseId) {
            return base.Channel.GetIncomingDocumentIdentifiersByCaseIdAsync(caseId);
        }
        
        public eCase.Service.Client.eCaseService.OutgoingDocument GetOutgoingDocumentById(System.Guid outgoingDocumentId) {
            return base.Channel.GetOutgoingDocumentById(outgoingDocumentId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.OutgoingDocument> GetOutgoingDocumentByIdAsync(System.Guid outgoingDocumentId) {
            return base.Channel.GetOutgoingDocumentByIdAsync(outgoingDocumentId);
        }
        
        public System.Guid[] GetOutgoingDocumentIdentifiersByCaseId(System.Guid caseId) {
            return base.Channel.GetOutgoingDocumentIdentifiersByCaseId(caseId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetOutgoingDocumentIdentifiersByCaseIdAsync(System.Guid caseId) {
            return base.Channel.GetOutgoingDocumentIdentifiersByCaseIdAsync(caseId);
        }
        
        public eCase.Service.Client.eCaseService.Case GetCaseById(System.Guid caseId) {
            return base.Channel.GetCaseById(caseId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Case> GetCaseByIdAsync(System.Guid caseId) {
            return base.Channel.GetCaseByIdAsync(caseId);
        }
        
        public eCase.Service.Client.eCaseService.ConnectedCase GetConnectedCaseById(System.Guid connectedCaseId) {
            return base.Channel.GetConnectedCaseById(connectedCaseId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.ConnectedCase> GetConnectedCaseByIdAsync(System.Guid connectedCaseId) {
            return base.Channel.GetConnectedCaseByIdAsync(connectedCaseId);
        }
        
        public System.Guid[] GetConnectedCaseIdentifiersByCaseId(System.Guid caseId) {
            return base.Channel.GetConnectedCaseIdentifiersByCaseId(caseId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetConnectedCaseIdentifiersByCaseIdAsync(System.Guid caseId) {
            return base.Channel.GetConnectedCaseIdentifiersByCaseIdAsync(caseId);
        }
        
        public eCase.Service.Client.eCaseService.Reporter GetReporterById(System.Guid reporterId) {
            return base.Channel.GetReporterById(reporterId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Reporter> GetReporterByIdAsync(System.Guid reporterId) {
            return base.Channel.GetReporterByIdAsync(reporterId);
        }
        
        public System.Guid[] GetReporterIdentifiersByCaseId(System.Guid caseId) {
            return base.Channel.GetReporterIdentifiersByCaseId(caseId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetReporterIdentifiersByCaseIdAsync(System.Guid caseId) {
            return base.Channel.GetReporterIdentifiersByCaseIdAsync(caseId);
        }
        
        public eCase.Service.Client.eCaseService.Assignment GetAssignmentById(System.Guid assignmentId) {
            return base.Channel.GetAssignmentById(assignmentId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Assignment> GetAssignmentByIdAsync(System.Guid assignmentId) {
            return base.Channel.GetAssignmentByIdAsync(assignmentId);
        }
        
        public System.Guid[] GetAssignmentIdentifiersByCaseId(System.Guid caseId) {
            return base.Channel.GetAssignmentIdentifiersByCaseId(caseId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetAssignmentIdentifiersByCaseIdAsync(System.Guid caseId) {
            return base.Channel.GetAssignmentIdentifiersByCaseIdAsync(caseId);
        }
        
        public eCase.Service.Client.eCaseService.Hearing GetHearingById(System.Guid hearingId) {
            return base.Channel.GetHearingById(hearingId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Hearing> GetHearingByIdAsync(System.Guid hearingId) {
            return base.Channel.GetHearingByIdAsync(hearingId);
        }
        
        public System.Guid[] GetHearingIdentifiersByCaseId(System.Guid caseId) {
            return base.Channel.GetHearingIdentifiersByCaseId(caseId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetHearingIdentifiersByCaseIdAsync(System.Guid caseId) {
            return base.Channel.GetHearingIdentifiersByCaseIdAsync(caseId);
        }
        
        public eCase.Service.Client.eCaseService.HearingParticipant GetHearingParticipantById(System.Guid hearingParticipantId) {
            return base.Channel.GetHearingParticipantById(hearingParticipantId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.HearingParticipant> GetHearingParticipantByIdAsync(System.Guid hearingParticipantId) {
            return base.Channel.GetHearingParticipantByIdAsync(hearingParticipantId);
        }
        
        public System.Guid[] GetHearingParticipantIdentifiersByHearingId(System.Guid hearingId) {
            return base.Channel.GetHearingParticipantIdentifiersByHearingId(hearingId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetHearingParticipantIdentifiersByHearingIdAsync(System.Guid hearingId) {
            return base.Channel.GetHearingParticipantIdentifiersByHearingIdAsync(hearingId);
        }
        
        public eCase.Service.Client.eCaseService.Act GetActById(System.Guid actId) {
            return base.Channel.GetActById(actId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Act> GetActByIdAsync(System.Guid actId) {
            return base.Channel.GetActByIdAsync(actId);
        }
        
        public System.Guid[] GetActIdentifiersByCaseId(System.Guid caseId) {
            return base.Channel.GetActIdentifiersByCaseId(caseId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetActIdentifiersByCaseIdAsync(System.Guid caseId) {
            return base.Channel.GetActIdentifiersByCaseIdAsync(caseId);
        }
        
        public eCase.Service.Client.eCaseService.ActPreparator GetActPreparatorById(System.Guid actPreparatorId) {
            return base.Channel.GetActPreparatorById(actPreparatorId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.ActPreparator> GetActPreparatorByIdAsync(System.Guid actPreparatorId) {
            return base.Channel.GetActPreparatorByIdAsync(actPreparatorId);
        }
        
        public System.Guid[] GetActPreparatorIdentifiersByActId(System.Guid actId) {
            return base.Channel.GetActPreparatorIdentifiersByActId(actId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetActPreparatorIdentifiersByActIdAsync(System.Guid actId) {
            return base.Channel.GetActPreparatorIdentifiersByActIdAsync(actId);
        }
        
        public eCase.Service.Client.eCaseService.Appeal GetAppealById(System.Guid appealId) {
            return base.Channel.GetAppealById(appealId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Appeal> GetAppealByIdAsync(System.Guid appealId) {
            return base.Channel.GetAppealByIdAsync(appealId);
        }
        
        public System.Guid[] GetAppealIdentifiersByActId(System.Guid actId) {
            return base.Channel.GetAppealIdentifiersByActId(actId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetAppealIdentifiersByActIdAsync(System.Guid actId) {
            return base.Channel.GetAppealIdentifiersByActIdAsync(actId);
        }
        
        public eCase.Service.Client.eCaseService.CaseRuling GetCaseRulingById(System.Guid caseRulingId) {
            return base.Channel.GetCaseRulingById(caseRulingId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.CaseRuling> GetCaseRulingByIdAsync(System.Guid caseRulingId) {
            return base.Channel.GetCaseRulingByIdAsync(caseRulingId);
        }
        
        public System.Guid[] GetCaseRulingIdentifiersByCaseId(System.Guid caseId) {
            return base.Channel.GetCaseRulingIdentifiersByCaseId(caseId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetCaseRulingIdentifiersByCaseIdAsync(System.Guid caseId) {
            return base.Channel.GetCaseRulingIdentifiersByCaseIdAsync(caseId);
        }
        
        public eCase.Service.Client.eCaseService.Side GetSideById(System.Guid sideId) {
            return base.Channel.GetSideById(sideId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Side> GetSideByIdAsync(System.Guid sideId) {
            return base.Channel.GetSideByIdAsync(sideId);
        }
        
        public System.Guid[] GetSideIdentifiersByCaseId(System.Guid caseId) {
            return base.Channel.GetSideIdentifiersByCaseId(caseId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetSideIdentifiersByCaseIdAsync(System.Guid caseId) {
            return base.Channel.GetSideIdentifiersByCaseIdAsync(caseId);
        }
        
        public eCase.Service.Client.eCaseService.LawyerAssignment GetLawyerAssignmentById(System.Guid lawyerAssignmentId) {
            return base.Channel.GetLawyerAssignmentById(lawyerAssignmentId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.LawyerAssignment> GetLawyerAssignmentByIdAsync(System.Guid lawyerAssignmentId) {
            return base.Channel.GetLawyerAssignmentByIdAsync(lawyerAssignmentId);
        }
        
        public System.Guid[] GetLawyerAssignmentIdentifiersBySideId(System.Guid sideId) {
            return base.Channel.GetLawyerAssignmentIdentifiersBySideId(sideId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetLawyerAssignmentIdentifiersBySideIdAsync(System.Guid sideId) {
            return base.Channel.GetLawyerAssignmentIdentifiersBySideIdAsync(sideId);
        }
        
        public eCase.Service.Client.eCaseService.PersonAssignment GetPersonAssignmentById(System.Guid personAssignmentId) {
            return base.Channel.GetPersonAssignmentById(personAssignmentId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PersonAssignment> GetPersonAssignmentByIdAsync(System.Guid personAssignmentId) {
            return base.Channel.GetPersonAssignmentByIdAsync(personAssignmentId);
        }
        
        public System.Guid[] GetPersonAssignmentIdentifiersBySideId(System.Guid sideId) {
            return base.Channel.GetPersonAssignmentIdentifiersBySideId(sideId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetPersonAssignmentIdentifiersBySideIdAsync(System.Guid sideId) {
            return base.Channel.GetPersonAssignmentIdentifiersBySideIdAsync(sideId);
        }
        
        public eCase.Service.Client.eCaseService.LawyerRegistration GetLawyerRegistrationById(System.Guid lawyerRegistrationId) {
            return base.Channel.GetLawyerRegistrationById(lawyerRegistrationId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.LawyerRegistration> GetLawyerRegistrationByIdAsync(System.Guid lawyerRegistrationId) {
            return base.Channel.GetLawyerRegistrationByIdAsync(lawyerRegistrationId);
        }
        
        public System.Guid[] GetLawyerRegistrationIdentifiersByLawyerId(System.Guid lawyerId) {
            return base.Channel.GetLawyerRegistrationIdentifiersByLawyerId(lawyerId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetLawyerRegistrationIdentifiersByLawyerIdAsync(System.Guid lawyerId) {
            return base.Channel.GetLawyerRegistrationIdentifiersByLawyerIdAsync(lawyerId);
        }
        
        public eCase.Service.Client.eCaseService.PersonRegistration GetPersonRegistrationById(System.Guid personRegistrationId) {
            return base.Channel.GetPersonRegistrationById(personRegistrationId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PersonRegistration> GetPersonRegistrationByIdAsync(System.Guid personRegistrationId) {
            return base.Channel.GetPersonRegistrationByIdAsync(personRegistrationId);
        }
        
        public System.Nullable<System.Guid> GetPersonRegistrationIdentifierByPersonAssignmentId(System.Guid personassignmentId) {
            return base.Channel.GetPersonRegistrationIdentifierByPersonAssignmentId(personassignmentId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetPersonRegistrationIdentifierByPersonAssignmentIdAsync(System.Guid personassignmentId) {
            return base.Channel.GetPersonRegistrationIdentifierByPersonAssignmentIdAsync(personassignmentId);
        }
        
        public eCase.Service.Client.eCaseService.Summon GetSummonById(System.Guid summonId) {
            return base.Channel.GetSummonById(summonId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Summon> GetSummonByIdAsync(System.Guid summonId) {
            return base.Channel.GetSummonByIdAsync(summonId);
        }
        
        public System.Guid[] GetSummonIdentifiersByParentId(System.Guid parentId, string summonTypeCode) {
            return base.Channel.GetSummonIdentifiersByParentId(parentId, summonTypeCode);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetSummonIdentifiersByParentIdAsync(System.Guid parentId, string summonTypeCode) {
            return base.Channel.GetSummonIdentifiersByParentIdAsync(parentId, summonTypeCode);
        }
        
        public eCase.Service.Client.eCaseService.ScannedDocument GetScannedDocumentById(System.Guid scannedDocumentId) {
            return base.Channel.GetScannedDocumentById(scannedDocumentId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.ScannedDocument> GetScannedDocumentByIdAsync(System.Guid scannedDocumentId) {
            return base.Channel.GetScannedDocumentByIdAsync(scannedDocumentId);
        }
        
        public System.Guid[] GetScannedDocumentIdentifiersByCaseId(System.Guid caseId) {
            return base.Channel.GetScannedDocumentIdentifiersByCaseId(caseId);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetScannedDocumentIdentifiersByCaseIdAsync(System.Guid caseId) {
            return base.Channel.GetScannedDocumentIdentifiersByCaseIdAsync(caseId);
        }
        
        public eCase.Service.Client.eCaseService.AssignmentFile GetAssignmentFileById(System.Guid assignmentFileId) {
            return base.Channel.GetAssignmentFileById(assignmentFileId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.AssignmentFile> GetAssignmentFileByIdAsync(System.Guid assignmentFileId) {
            return base.Channel.GetAssignmentFileByIdAsync(assignmentFileId);
        }
        
        public System.Nullable<System.Guid> GetAssignmentFileIdentifiersByAssignmentId(System.Guid assignmentId) {
            return base.Channel.GetAssignmentFileIdentifiersByAssignmentId(assignmentId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetAssignmentFileIdentifiersByAssignmentIdAsync(System.Guid assignmentId) {
            return base.Channel.GetAssignmentFileIdentifiersByAssignmentIdAsync(assignmentId);
        }
        
        public eCase.Service.Client.eCaseService.PrivateProtocolFile GetPrivateProtocolFileById(System.Guid privateProtocolId) {
            return base.Channel.GetPrivateProtocolFileById(privateProtocolId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PrivateProtocolFile> GetPrivateProtocolFileByIdAsync(System.Guid privateProtocolId) {
            return base.Channel.GetPrivateProtocolFileByIdAsync(privateProtocolId);
        }
        
        public System.Nullable<System.Guid> GetPrivateProtocolFileIdentifierByHearingId(System.Guid hearingId) {
            return base.Channel.GetPrivateProtocolFileIdentifierByHearingId(hearingId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetPrivateProtocolFileIdentifierByHearingIdAsync(System.Guid hearingId) {
            return base.Channel.GetPrivateProtocolFileIdentifierByHearingIdAsync(hearingId);
        }
        
        public eCase.Service.Client.eCaseService.PublicProtocolFile GetPublicProtocolFileById(System.Guid publicProtocolFileId) {
            return base.Channel.GetPublicProtocolFileById(publicProtocolFileId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PublicProtocolFile> GetPublicProtocolFileByIdAsync(System.Guid publicProtocolFileId) {
            return base.Channel.GetPublicProtocolFileByIdAsync(publicProtocolFileId);
        }
        
        public System.Nullable<System.Guid> GetPublicProtocolFileIdentifierByHearingId(System.Guid hearingId) {
            return base.Channel.GetPublicProtocolFileIdentifierByHearingId(hearingId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetPublicProtocolFileIdentifierByHearingIdAsync(System.Guid hearingId) {
            return base.Channel.GetPublicProtocolFileIdentifierByHearingIdAsync(hearingId);
        }
        
        public eCase.Service.Client.eCaseService.IncomingDocumentFile GetIncomingDocumentFileById(System.Guid incomingDocumentFileId) {
            return base.Channel.GetIncomingDocumentFileById(incomingDocumentFileId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.IncomingDocumentFile> GetIncomingDocumentFileByIdAsync(System.Guid incomingDocumentFileId) {
            return base.Channel.GetIncomingDocumentFileByIdAsync(incomingDocumentFileId);
        }
        
        public System.Nullable<System.Guid> GetIncomingDocumentFileIdentifierByIncomingDocumentId(System.Guid incomingDocumentId) {
            return base.Channel.GetIncomingDocumentFileIdentifierByIncomingDocumentId(incomingDocumentId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetIncomingDocumentFileIdentifierByIncomingDocumentIdAsync(System.Guid incomingDocumentId) {
            return base.Channel.GetIncomingDocumentFileIdentifierByIncomingDocumentIdAsync(incomingDocumentId);
        }
        
        public eCase.Service.Client.eCaseService.OutgoingDocumentFile GetOutgoingDocumentFileById(System.Guid outgoingDocumentFileId) {
            return base.Channel.GetOutgoingDocumentFileById(outgoingDocumentFileId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.OutgoingDocumentFile> GetOutgoingDocumentFileByIdAsync(System.Guid outgoingDocumentFileId) {
            return base.Channel.GetOutgoingDocumentFileByIdAsync(outgoingDocumentFileId);
        }
        
        public System.Nullable<System.Guid> GetOutgoingDocumentFileIdentifierByOutgoingDocumentId(System.Guid outgoingDocumentId) {
            return base.Channel.GetOutgoingDocumentFileIdentifierByOutgoingDocumentId(outgoingDocumentId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetOutgoingDocumentFileIdentifierByOutgoingDocumentIdAsync(System.Guid outgoingDocumentId) {
            return base.Channel.GetOutgoingDocumentFileIdentifierByOutgoingDocumentIdAsync(outgoingDocumentId);
        }
        
        public eCase.Service.Client.eCaseService.SummonFile GetSummonFileById(System.Guid summonFileId) {
            return base.Channel.GetSummonFileById(summonFileId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.SummonFile> GetSummonFileByIdAsync(System.Guid summonFileId) {
            return base.Channel.GetSummonFileByIdAsync(summonFileId);
        }
        
        public System.Nullable<System.Guid> GetSummonFileIdentifierBySummonId(System.Guid summonId) {
            return base.Channel.GetSummonFileIdentifierBySummonId(summonId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetSummonFileIdentifierBySummonIdAsync(System.Guid summonId) {
            return base.Channel.GetSummonFileIdentifierBySummonIdAsync(summonId);
        }
        
        public eCase.Service.Client.eCaseService.PrivateActFile GetPrivateActFileById(System.Guid privateActFileId) {
            return base.Channel.GetPrivateActFileById(privateActFileId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PrivateActFile> GetPrivateActFileByIdAsync(System.Guid privateActFileId) {
            return base.Channel.GetPrivateActFileByIdAsync(privateActFileId);
        }
        
        public System.Nullable<System.Guid> GetPrivateActFileIdentifiersByActId(System.Guid actId) {
            return base.Channel.GetPrivateActFileIdentifiersByActId(actId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetPrivateActFileIdentifiersByActIdAsync(System.Guid actId) {
            return base.Channel.GetPrivateActFileIdentifiersByActIdAsync(actId);
        }
        
        public eCase.Service.Client.eCaseService.PublicActFile GetPublicActFileById(System.Guid publicActFileId) {
            return base.Channel.GetPublicActFileById(publicActFileId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PublicActFile> GetPublicActFileByIdAsync(System.Guid publicActFileId) {
            return base.Channel.GetPublicActFileByIdAsync(publicActFileId);
        }
        
        public System.Nullable<System.Guid> GetPublicActFileIdentifierByActId(System.Guid actId) {
            return base.Channel.GetPublicActFileIdentifierByActId(actId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetPublicActFileIdentifierByActIdAsync(System.Guid actId) {
            return base.Channel.GetPublicActFileIdentifierByActIdAsync(actId);
        }
        
        public eCase.Service.Client.eCaseService.PrivateMotiveFile GetPrivateMotiveFileById(System.Guid privateMotiveFileId) {
            return base.Channel.GetPrivateMotiveFileById(privateMotiveFileId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PrivateMotiveFile> GetPrivateMotiveFileByIdAsync(System.Guid privateMotiveFileId) {
            return base.Channel.GetPrivateMotiveFileByIdAsync(privateMotiveFileId);
        }
        
        public System.Nullable<System.Guid> GetPrivateMotiveFileIdentifierByActId(System.Guid actId) {
            return base.Channel.GetPrivateMotiveFileIdentifierByActId(actId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetPrivateMotiveFileIdentifierByActIdAsync(System.Guid actId) {
            return base.Channel.GetPrivateMotiveFileIdentifierByActIdAsync(actId);
        }
        
        public eCase.Service.Client.eCaseService.PublicMotiveFile GetPublicMotiveFileById(System.Guid publicActFileId) {
            return base.Channel.GetPublicMotiveFileById(publicActFileId);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.PublicMotiveFile> GetPublicMotiveFileByIdAsync(System.Guid publicActFileId) {
            return base.Channel.GetPublicMotiveFileByIdAsync(publicActFileId);
        }
        
        public System.Nullable<System.Guid> GetPublicMotiveFileIdentifierByActId(System.Guid actId) {
            return base.Channel.GetPublicMotiveFileIdentifierByActId(actId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> GetPublicMotiveFileIdentifierByActIdAsync(System.Guid actId) {
            return base.Channel.GetPublicMotiveFileIdentifierByActIdAsync(actId);
        }
        
        public System.Nullable<System.Guid> InsertIncomingDocument(eCase.Service.Client.eCaseService.IncomingDocument incomingDocument) {
            return base.Channel.InsertIncomingDocument(incomingDocument);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertIncomingDocumentAsync(eCase.Service.Client.eCaseService.IncomingDocument incomingDocument) {
            return base.Channel.InsertIncomingDocumentAsync(incomingDocument);
        }
        
        public System.Nullable<System.Guid> UpdateIncomingDocument(eCase.Service.Client.eCaseService.IncomingDocument incomingDocument) {
            return base.Channel.UpdateIncomingDocument(incomingDocument);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateIncomingDocumentAsync(eCase.Service.Client.eCaseService.IncomingDocument incomingDocument) {
            return base.Channel.UpdateIncomingDocumentAsync(incomingDocument);
        }
        
        public System.Nullable<System.Guid> InsertIncomingDocumentFile(eCase.Service.Client.eCaseService.IncomingDocumentFile incomingDocumentFile) {
            return base.Channel.InsertIncomingDocumentFile(incomingDocumentFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertIncomingDocumentFileAsync(eCase.Service.Client.eCaseService.IncomingDocumentFile incomingDocumentFile) {
            return base.Channel.InsertIncomingDocumentFileAsync(incomingDocumentFile);
        }
        
        public System.Nullable<System.Guid> UpdateIncomingDocumentFile(eCase.Service.Client.eCaseService.IncomingDocumentFile incomingDocumentFile) {
            return base.Channel.UpdateIncomingDocumentFile(incomingDocumentFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateIncomingDocumentFileAsync(eCase.Service.Client.eCaseService.IncomingDocumentFile incomingDocumentFile) {
            return base.Channel.UpdateIncomingDocumentFileAsync(incomingDocumentFile);
        }
        
        public System.Nullable<System.Guid> InsertOutgoingDocument(eCase.Service.Client.eCaseService.OutgoingDocument outgoingDocument) {
            return base.Channel.InsertOutgoingDocument(outgoingDocument);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertOutgoingDocumentAsync(eCase.Service.Client.eCaseService.OutgoingDocument outgoingDocument) {
            return base.Channel.InsertOutgoingDocumentAsync(outgoingDocument);
        }
        
        public System.Nullable<System.Guid> UpdateOutgoingDocument(eCase.Service.Client.eCaseService.OutgoingDocument outgoingDocument) {
            return base.Channel.UpdateOutgoingDocument(outgoingDocument);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateOutgoingDocumentAsync(eCase.Service.Client.eCaseService.OutgoingDocument outgoingDocument) {
            return base.Channel.UpdateOutgoingDocumentAsync(outgoingDocument);
        }
        
        public System.Nullable<System.Guid> InsertOutgoingDocumentFile(eCase.Service.Client.eCaseService.OutgoingDocumentFile outgoingDocumentFile) {
            return base.Channel.InsertOutgoingDocumentFile(outgoingDocumentFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertOutgoingDocumentFileAsync(eCase.Service.Client.eCaseService.OutgoingDocumentFile outgoingDocumentFile) {
            return base.Channel.InsertOutgoingDocumentFileAsync(outgoingDocumentFile);
        }
        
        public System.Nullable<System.Guid> UpdateOutgoingDocumentFile(eCase.Service.Client.eCaseService.OutgoingDocumentFile outgoingDocumentFile) {
            return base.Channel.UpdateOutgoingDocumentFile(outgoingDocumentFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateOutgoingDocumentFileAsync(eCase.Service.Client.eCaseService.OutgoingDocumentFile outgoingDocumentFile) {
            return base.Channel.UpdateOutgoingDocumentFileAsync(outgoingDocumentFile);
        }
        
        public System.Nullable<System.Guid> InsertCase(eCase.Service.Client.eCaseService.Case c) {
            return base.Channel.InsertCase(c);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertCaseAsync(eCase.Service.Client.eCaseService.Case c) {
            return base.Channel.InsertCaseAsync(c);
        }
        
        public System.Nullable<System.Guid> UpdateCase(eCase.Service.Client.eCaseService.Case c) {
            return base.Channel.UpdateCase(c);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateCaseAsync(eCase.Service.Client.eCaseService.Case c) {
            return base.Channel.UpdateCaseAsync(c);
        }
        
        public System.Nullable<System.Guid> InsertConnectedCase(eCase.Service.Client.eCaseService.ConnectedCase connectedCase) {
            return base.Channel.InsertConnectedCase(connectedCase);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertConnectedCaseAsync(eCase.Service.Client.eCaseService.ConnectedCase connectedCase) {
            return base.Channel.InsertConnectedCaseAsync(connectedCase);
        }
        
        public System.Nullable<System.Guid> UpdateConnectedCase(eCase.Service.Client.eCaseService.ConnectedCase connectedCase) {
            return base.Channel.UpdateConnectedCase(connectedCase);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateConnectedCaseAsync(eCase.Service.Client.eCaseService.ConnectedCase connectedCase) {
            return base.Channel.UpdateConnectedCaseAsync(connectedCase);
        }
        
        public System.Nullable<System.Guid> InsertReporter(eCase.Service.Client.eCaseService.Reporter reporter) {
            return base.Channel.InsertReporter(reporter);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertReporterAsync(eCase.Service.Client.eCaseService.Reporter reporter) {
            return base.Channel.InsertReporterAsync(reporter);
        }
        
        public System.Nullable<System.Guid> UpdateReporter(eCase.Service.Client.eCaseService.Reporter reporter) {
            return base.Channel.UpdateReporter(reporter);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateReporterAsync(eCase.Service.Client.eCaseService.Reporter reporter) {
            return base.Channel.UpdateReporterAsync(reporter);
        }
        
        public System.Nullable<System.Guid> InsertAssignment(eCase.Service.Client.eCaseService.Assignment assignment) {
            return base.Channel.InsertAssignment(assignment);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertAssignmentAsync(eCase.Service.Client.eCaseService.Assignment assignment) {
            return base.Channel.InsertAssignmentAsync(assignment);
        }
        
        public System.Nullable<System.Guid> UpdateAssignment(eCase.Service.Client.eCaseService.Assignment assignment) {
            return base.Channel.UpdateAssignment(assignment);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateAssignmentAsync(eCase.Service.Client.eCaseService.Assignment assignment) {
            return base.Channel.UpdateAssignmentAsync(assignment);
        }
        
        public System.Nullable<System.Guid> InsertAssignmentFile(eCase.Service.Client.eCaseService.AssignmentFile assignmentFile) {
            return base.Channel.InsertAssignmentFile(assignmentFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertAssignmentFileAsync(eCase.Service.Client.eCaseService.AssignmentFile assignmentFile) {
            return base.Channel.InsertAssignmentFileAsync(assignmentFile);
        }
        
        public System.Nullable<System.Guid> UpdateAssignmentFile(eCase.Service.Client.eCaseService.AssignmentFile assignmentFile) {
            return base.Channel.UpdateAssignmentFile(assignmentFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateAssignmentFileAsync(eCase.Service.Client.eCaseService.AssignmentFile assignmentFile) {
            return base.Channel.UpdateAssignmentFileAsync(assignmentFile);
        }
        
        public System.Nullable<System.Guid> InsertHearing(eCase.Service.Client.eCaseService.Hearing hearing) {
            return base.Channel.InsertHearing(hearing);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertHearingAsync(eCase.Service.Client.eCaseService.Hearing hearing) {
            return base.Channel.InsertHearingAsync(hearing);
        }
        
        public System.Nullable<System.Guid> UpdateHearing(eCase.Service.Client.eCaseService.Hearing hearing) {
            return base.Channel.UpdateHearing(hearing);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateHearingAsync(eCase.Service.Client.eCaseService.Hearing hearing) {
            return base.Channel.UpdateHearingAsync(hearing);
        }
        
        public System.Nullable<System.Guid> InsertPrivateProtocolFile(eCase.Service.Client.eCaseService.PrivateProtocolFile privateProtocolFile) {
            return base.Channel.InsertPrivateProtocolFile(privateProtocolFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPrivateProtocolFileAsync(eCase.Service.Client.eCaseService.PrivateProtocolFile privateProtocolFile) {
            return base.Channel.InsertPrivateProtocolFileAsync(privateProtocolFile);
        }
        
        public System.Nullable<System.Guid> UpdatePrivateProtocolFile(eCase.Service.Client.eCaseService.PrivateProtocolFile privateProtocolFile) {
            return base.Channel.UpdatePrivateProtocolFile(privateProtocolFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdatePrivateProtocolFileAsync(eCase.Service.Client.eCaseService.PrivateProtocolFile privateProtocolFile) {
            return base.Channel.UpdatePrivateProtocolFileAsync(privateProtocolFile);
        }
        
        public System.Nullable<System.Guid> InsertPublicProtocolFile(eCase.Service.Client.eCaseService.PublicProtocolFile publicProtocolFile) {
            return base.Channel.InsertPublicProtocolFile(publicProtocolFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPublicProtocolFileAsync(eCase.Service.Client.eCaseService.PublicProtocolFile publicProtocolFile) {
            return base.Channel.InsertPublicProtocolFileAsync(publicProtocolFile);
        }
        
        public System.Nullable<System.Guid> UpdatePublicProtocolFile(eCase.Service.Client.eCaseService.PublicProtocolFile publicProtocolFile) {
            return base.Channel.UpdatePublicProtocolFile(publicProtocolFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdatePublicProtocolFileAsync(eCase.Service.Client.eCaseService.PublicProtocolFile publicProtocolFile) {
            return base.Channel.UpdatePublicProtocolFileAsync(publicProtocolFile);
        }
        
        public System.Nullable<System.Guid> InsertHearingParticipant(eCase.Service.Client.eCaseService.HearingParticipant hearingParticipant) {
            return base.Channel.InsertHearingParticipant(hearingParticipant);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertHearingParticipantAsync(eCase.Service.Client.eCaseService.HearingParticipant hearingParticipant) {
            return base.Channel.InsertHearingParticipantAsync(hearingParticipant);
        }
        
        public System.Nullable<System.Guid> UpdateHearingParticipant(eCase.Service.Client.eCaseService.HearingParticipant hearingParticipant) {
            return base.Channel.UpdateHearingParticipant(hearingParticipant);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateHearingParticipantAsync(eCase.Service.Client.eCaseService.HearingParticipant hearingParticipant) {
            return base.Channel.UpdateHearingParticipantAsync(hearingParticipant);
        }
        
        public System.Nullable<System.Guid> InsertAct(eCase.Service.Client.eCaseService.Act act) {
            return base.Channel.InsertAct(act);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertActAsync(eCase.Service.Client.eCaseService.Act act) {
            return base.Channel.InsertActAsync(act);
        }
        
        public System.Nullable<System.Guid> UpdateAct(eCase.Service.Client.eCaseService.Act act) {
            return base.Channel.UpdateAct(act);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateActAsync(eCase.Service.Client.eCaseService.Act act) {
            return base.Channel.UpdateActAsync(act);
        }
        
        public System.Nullable<System.Guid> InsertPublicActFile(eCase.Service.Client.eCaseService.PublicActFile publicActFile) {
            return base.Channel.InsertPublicActFile(publicActFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPublicActFileAsync(eCase.Service.Client.eCaseService.PublicActFile publicActFile) {
            return base.Channel.InsertPublicActFileAsync(publicActFile);
        }
        
        public System.Nullable<System.Guid> UpdatePublicActFile(eCase.Service.Client.eCaseService.PublicActFile publicActFile) {
            return base.Channel.UpdatePublicActFile(publicActFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdatePublicActFileAsync(eCase.Service.Client.eCaseService.PublicActFile publicActFile) {
            return base.Channel.UpdatePublicActFileAsync(publicActFile);
        }
        
        public System.Nullable<System.Guid> InsertPrivateActFile(eCase.Service.Client.eCaseService.PrivateActFile privateActFile) {
            return base.Channel.InsertPrivateActFile(privateActFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPrivateActFileAsync(eCase.Service.Client.eCaseService.PrivateActFile privateActFile) {
            return base.Channel.InsertPrivateActFileAsync(privateActFile);
        }
        
        public System.Nullable<System.Guid> UpdatePrivateActFile(eCase.Service.Client.eCaseService.PrivateActFile privateActFile) {
            return base.Channel.UpdatePrivateActFile(privateActFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdatePrivateActFileAsync(eCase.Service.Client.eCaseService.PrivateActFile privateActFile) {
            return base.Channel.UpdatePrivateActFileAsync(privateActFile);
        }
        
        public System.Nullable<System.Guid> InsertPublicMotiveFile(eCase.Service.Client.eCaseService.PublicMotiveFile publicMotiveFile) {
            return base.Channel.InsertPublicMotiveFile(publicMotiveFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPublicMotiveFileAsync(eCase.Service.Client.eCaseService.PublicMotiveFile publicMotiveFile) {
            return base.Channel.InsertPublicMotiveFileAsync(publicMotiveFile);
        }
        
        public System.Nullable<System.Guid> UpdatePublicMotiveFile(eCase.Service.Client.eCaseService.PublicMotiveFile publicMotiveFile) {
            return base.Channel.UpdatePublicMotiveFile(publicMotiveFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdatePublicMotiveFileAsync(eCase.Service.Client.eCaseService.PublicMotiveFile publicMotiveFile) {
            return base.Channel.UpdatePublicMotiveFileAsync(publicMotiveFile);
        }
        
        public System.Nullable<System.Guid> InsertPrivateMotiveFile(eCase.Service.Client.eCaseService.PrivateMotiveFile privateMotiveFile) {
            return base.Channel.InsertPrivateMotiveFile(privateMotiveFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPrivateMotiveFileAsync(eCase.Service.Client.eCaseService.PrivateMotiveFile privateMotiveFile) {
            return base.Channel.InsertPrivateMotiveFileAsync(privateMotiveFile);
        }
        
        public System.Nullable<System.Guid> UpdatePrivateMotiveFile(eCase.Service.Client.eCaseService.PrivateMotiveFile privateMotiveFile) {
            return base.Channel.UpdatePrivateMotiveFile(privateMotiveFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdatePrivateMotiveFileAsync(eCase.Service.Client.eCaseService.PrivateMotiveFile privateMotiveFile) {
            return base.Channel.UpdatePrivateMotiveFileAsync(privateMotiveFile);
        }
        
        public System.Nullable<System.Guid> InsertActPreparator(eCase.Service.Client.eCaseService.ActPreparator actPreparator) {
            return base.Channel.InsertActPreparator(actPreparator);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertActPreparatorAsync(eCase.Service.Client.eCaseService.ActPreparator actPreparator) {
            return base.Channel.InsertActPreparatorAsync(actPreparator);
        }
        
        public System.Nullable<System.Guid> UpdateActPreparator(eCase.Service.Client.eCaseService.ActPreparator actPreparator) {
            return base.Channel.UpdateActPreparator(actPreparator);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateActPreparatorAsync(eCase.Service.Client.eCaseService.ActPreparator actPreparator) {
            return base.Channel.UpdateActPreparatorAsync(actPreparator);
        }
        
        public System.Nullable<System.Guid> InsertAppeal(eCase.Service.Client.eCaseService.Appeal appeal) {
            return base.Channel.InsertAppeal(appeal);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertAppealAsync(eCase.Service.Client.eCaseService.Appeal appeal) {
            return base.Channel.InsertAppealAsync(appeal);
        }
        
        public System.Nullable<System.Guid> UpdateAppeal(eCase.Service.Client.eCaseService.Appeal appeal) {
            return base.Channel.UpdateAppeal(appeal);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateAppealAsync(eCase.Service.Client.eCaseService.Appeal appeal) {
            return base.Channel.UpdateAppealAsync(appeal);
        }
        
        public System.Nullable<System.Guid> InsertCaseRuling(eCase.Service.Client.eCaseService.CaseRuling caseRuling) {
            return base.Channel.InsertCaseRuling(caseRuling);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertCaseRulingAsync(eCase.Service.Client.eCaseService.CaseRuling caseRuling) {
            return base.Channel.InsertCaseRulingAsync(caseRuling);
        }
        
        public System.Nullable<System.Guid> UpdateCaseRuling(eCase.Service.Client.eCaseService.CaseRuling caseRuling) {
            return base.Channel.UpdateCaseRuling(caseRuling);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateCaseRulingAsync(eCase.Service.Client.eCaseService.CaseRuling caseRuling) {
            return base.Channel.UpdateCaseRulingAsync(caseRuling);
        }
        
        public System.Nullable<System.Guid> InsertSide(eCase.Service.Client.eCaseService.Side side) {
            return base.Channel.InsertSide(side);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertSideAsync(eCase.Service.Client.eCaseService.Side side) {
            return base.Channel.InsertSideAsync(side);
        }
        
        public System.Nullable<System.Guid> UpdateSide(eCase.Service.Client.eCaseService.Side side) {
            return base.Channel.UpdateSide(side);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateSideAsync(eCase.Service.Client.eCaseService.Side side) {
            return base.Channel.UpdateSideAsync(side);
        }
        
        public System.Nullable<System.Guid> InsertLawyerAssignment(eCase.Service.Client.eCaseService.LawyerAssignment lawyerAssignment) {
            return base.Channel.InsertLawyerAssignment(lawyerAssignment);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertLawyerAssignmentAsync(eCase.Service.Client.eCaseService.LawyerAssignment lawyerAssignment) {
            return base.Channel.InsertLawyerAssignmentAsync(lawyerAssignment);
        }
        
        public System.Nullable<System.Guid> UpdateLawyerAssignment(eCase.Service.Client.eCaseService.LawyerAssignment lawyerAssignment) {
            return base.Channel.UpdateLawyerAssignment(lawyerAssignment);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateLawyerAssignmentAsync(eCase.Service.Client.eCaseService.LawyerAssignment lawyerAssignment) {
            return base.Channel.UpdateLawyerAssignmentAsync(lawyerAssignment);
        }
        
        public System.Nullable<System.Guid> InsertSummon(eCase.Service.Client.eCaseService.Summon summon, System.Guid userId) {
            return base.Channel.InsertSummon(summon, userId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertSummonAsync(eCase.Service.Client.eCaseService.Summon summon, System.Guid userId) {
            return base.Channel.InsertSummonAsync(summon, userId);
        }
        
        public System.Nullable<System.Guid> UpdateSummon(eCase.Service.Client.eCaseService.Summon summon) {
            return base.Channel.UpdateSummon(summon);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateSummonAsync(eCase.Service.Client.eCaseService.Summon summon) {
            return base.Channel.UpdateSummonAsync(summon);
        }
        
        public System.Nullable<System.Guid> InsertSummonFile(eCase.Service.Client.eCaseService.SummonFile summonFile) {
            return base.Channel.InsertSummonFile(summonFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertSummonFileAsync(eCase.Service.Client.eCaseService.SummonFile summonFile) {
            return base.Channel.InsertSummonFileAsync(summonFile);
        }
        
        public System.Nullable<System.Guid> UpdateSummonFile(eCase.Service.Client.eCaseService.SummonFile summonFile) {
            return base.Channel.UpdateSummonFile(summonFile);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateSummonFileAsync(eCase.Service.Client.eCaseService.SummonFile summonFile) {
            return base.Channel.UpdateSummonFileAsync(summonFile);
        }
        
        public eCase.Service.Client.eCaseService.Lawyer[] GetAllLawyers() {
            return base.Channel.GetAllLawyers();
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Lawyer[]> GetAllLawyersAsync() {
            return base.Channel.GetAllLawyersAsync();
        }
        
        public eCase.Service.Client.eCaseService.Lawyer[] GetAllNewLawyers(System.DateTime from) {
            return base.Channel.GetAllNewLawyers(from);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Lawyer[]> GetAllNewLawyersAsync(System.DateTime from) {
            return base.Channel.GetAllNewLawyersAsync(from);
        }
        
        public eCase.Service.Client.eCaseService.Lawyer GetLawyerByNumber(string number) {
            return base.Channel.GetLawyerByNumber(number);
        }
        
        public System.Threading.Tasks.Task<eCase.Service.Client.eCaseService.Lawyer> GetLawyerByNumberAsync(string number) {
            return base.Channel.GetLawyerByNumberAsync(number);
        }
        
        public System.Tuple<System.Guid, System.DateTime>[] GetAllReadSummons() {
            return base.Channel.GetAllReadSummons();
        }
        
        public System.Threading.Tasks.Task<System.Tuple<System.Guid, System.DateTime>[]> GetAllReadSummonsAsync() {
            return base.Channel.GetAllReadSummonsAsync();
        }
        
        public System.Guid[] GetReadSummonsForCertainDay(System.DateTime date) {
            return base.Channel.GetReadSummonsForCertainDay(date);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetReadSummonsForCertainDayAsync(System.DateTime date) {
            return base.Channel.GetReadSummonsForCertainDayAsync(date);
        }
        
        public byte[] GetSummonReportDocument(System.Guid summonId) {
            return base.Channel.GetSummonReportDocument(summonId);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetSummonReportDocumentAsync(System.Guid summonId) {
            return base.Channel.GetSummonReportDocumentAsync(summonId);
        }
        
        public void ActivateSummonsAccess(System.Guid userId, System.Guid caseId) {
            base.Channel.ActivateSummonsAccess(userId, caseId);
        }
        
        public System.Threading.Tasks.Task ActivateSummonsAccessAsync(System.Guid userId, System.Guid caseId) {
            return base.Channel.ActivateSummonsAccessAsync(userId, caseId);
        }
        
        public void DeactivateSummonsAccess(System.Guid userId, System.Guid caseId) {
            base.Channel.DeactivateSummonsAccess(userId, caseId);
        }
        
        public System.Threading.Tasks.Task DeactivateSummonsAccessAsync(System.Guid userId, System.Guid caseId) {
            return base.Channel.DeactivateSummonsAccessAsync(userId, caseId);
        }
        
        public System.Nullable<System.Guid> InsertPersonAssignment(eCase.Service.Client.eCaseService.PersonAssignment personAssignment) {
            return base.Channel.InsertPersonAssignment(personAssignment);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPersonAssignmentAsync(eCase.Service.Client.eCaseService.PersonAssignment personAssignment) {
            return base.Channel.InsertPersonAssignmentAsync(personAssignment);
        }
        
        public System.Nullable<System.Guid> UpdatePersonAssignment(eCase.Service.Client.eCaseService.PersonAssignment personAssignment) {
            return base.Channel.UpdatePersonAssignment(personAssignment);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdatePersonAssignmentAsync(eCase.Service.Client.eCaseService.PersonAssignment personAssignment) {
            return base.Channel.UpdatePersonAssignmentAsync(personAssignment);
        }
        
        public System.Nullable<System.Guid> InsertScannedDocument(eCase.Service.Client.eCaseService.ScannedDocument scannedDocument) {
            return base.Channel.InsertScannedDocument(scannedDocument);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertScannedDocumentAsync(eCase.Service.Client.eCaseService.ScannedDocument scannedDocument) {
            return base.Channel.InsertScannedDocumentAsync(scannedDocument);
        }
        
        public System.Nullable<System.Guid> UpdateScannedDocument(eCase.Service.Client.eCaseService.ScannedDocument scannedDocument) {
            return base.Channel.UpdateScannedDocument(scannedDocument);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateScannedDocumentAsync(eCase.Service.Client.eCaseService.ScannedDocument scannedDocument) {
            return base.Channel.UpdateScannedDocumentAsync(scannedDocument);
        }
        
        public System.Nullable<System.Guid> InsertLawyerRegistration(eCase.Service.Client.eCaseService.LawyerRegistration lawyerRegistration) {
            return base.Channel.InsertLawyerRegistration(lawyerRegistration);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertLawyerRegistrationAsync(eCase.Service.Client.eCaseService.LawyerRegistration lawyerRegistration) {
            return base.Channel.InsertLawyerRegistrationAsync(lawyerRegistration);
        }
        
        public System.Nullable<System.Guid> ActivateLawyerRegistration(System.Guid lawyerRegistrationId) {
            return base.Channel.ActivateLawyerRegistration(lawyerRegistrationId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> ActivateLawyerRegistrationAsync(System.Guid lawyerRegistrationId) {
            return base.Channel.ActivateLawyerRegistrationAsync(lawyerRegistrationId);
        }
        
        public System.Nullable<System.Guid> DeactivateLawyerRegistration(System.Guid lawyerRegistrationId) {
            return base.Channel.DeactivateLawyerRegistration(lawyerRegistrationId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> DeactivateLawyerRegistrationAsync(System.Guid lawyerRegistrationId) {
            return base.Channel.DeactivateLawyerRegistrationAsync(lawyerRegistrationId);
        }
        
        public System.Nullable<System.Guid> InsertPersonRegistration(eCase.Service.Client.eCaseService.PersonRegistration personRegistration) {
            return base.Channel.InsertPersonRegistration(personRegistration);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> InsertPersonRegistrationAsync(eCase.Service.Client.eCaseService.PersonRegistration personRegistration) {
            return base.Channel.InsertPersonRegistrationAsync(personRegistration);
        }
        
        public System.Nullable<System.Guid> ActivatePersonRegistration(System.Guid personRegistrationId) {
            return base.Channel.ActivatePersonRegistration(personRegistrationId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> ActivatePersonRegistrationAsync(System.Guid personRegistrationId) {
            return base.Channel.ActivatePersonRegistrationAsync(personRegistrationId);
        }
        
        public System.Nullable<System.Guid> DeactivatePersonRegistration(System.Guid personRegistrationId) {
            return base.Channel.DeactivatePersonRegistration(personRegistrationId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> DeactivatePersonRegistrationAsync(System.Guid personRegistrationId) {
            return base.Channel.DeactivatePersonRegistrationAsync(personRegistrationId);
        }
        
        public System.Nullable<System.Guid> UpdateUsername(string oldUsername, string newUsername, string courtCode) {
            return base.Channel.UpdateUsername(oldUsername, newUsername, courtCode);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UpdateUsernameAsync(string oldUsername, string newUsername, string courtCode) {
            return base.Channel.UpdateUsernameAsync(oldUsername, newUsername, courtCode);
        }
        
        public System.Guid[] GetCaseIdentifiers(System.Nullable<int> caseNumber, string caseKindCode, System.Nullable<int> caseYear, string department) {
            return base.Channel.GetCaseIdentifiers(caseNumber, caseKindCode, caseYear, department);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetCaseIdentifiersAsync(System.Nullable<int> caseNumber, string caseKindCode, System.Nullable<int> caseYear, string department) {
            return base.Channel.GetCaseIdentifiersAsync(caseNumber, caseKindCode, caseYear, department);
        }
        
        public bool DeleteIncomingDocument(System.Guid incomingDocumentId) {
            return base.Channel.DeleteIncomingDocument(incomingDocumentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteIncomingDocumentAsync(System.Guid incomingDocumentId) {
            return base.Channel.DeleteIncomingDocumentAsync(incomingDocumentId);
        }
        
        public bool DeleteOutgoingDocument(System.Guid outgoingDocumentId) {
            return base.Channel.DeleteOutgoingDocument(outgoingDocumentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteOutgoingDocumentAsync(System.Guid outgoingDocumentId) {
            return base.Channel.DeleteOutgoingDocumentAsync(outgoingDocumentId);
        }
        
        public bool DeleteCase(System.Guid caseId) {
            return base.Channel.DeleteCase(caseId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCaseAsync(System.Guid caseId) {
            return base.Channel.DeleteCaseAsync(caseId);
        }
        
        public bool DeleteConnectedCase(System.Guid connectedCaseId) {
            return base.Channel.DeleteConnectedCase(connectedCaseId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteConnectedCaseAsync(System.Guid connectedCaseId) {
            return base.Channel.DeleteConnectedCaseAsync(connectedCaseId);
        }
        
        public bool DeleteReporter(System.Guid reporterId) {
            return base.Channel.DeleteReporter(reporterId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteReporterAsync(System.Guid reporterId) {
            return base.Channel.DeleteReporterAsync(reporterId);
        }
        
        public bool DeleteAssignment(System.Guid assignmentId) {
            return base.Channel.DeleteAssignment(assignmentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAssignmentAsync(System.Guid assignmentId) {
            return base.Channel.DeleteAssignmentAsync(assignmentId);
        }
        
        public bool DeleteHearing(System.Guid hearingId) {
            return base.Channel.DeleteHearing(hearingId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteHearingAsync(System.Guid hearingId) {
            return base.Channel.DeleteHearingAsync(hearingId);
        }
        
        public bool DeleteHearingParticipant(System.Guid hearingParticipantId) {
            return base.Channel.DeleteHearingParticipant(hearingParticipantId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteHearingParticipantAsync(System.Guid hearingParticipantId) {
            return base.Channel.DeleteHearingParticipantAsync(hearingParticipantId);
        }
        
        public bool DeleteAct(System.Guid actId) {
            return base.Channel.DeleteAct(actId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteActAsync(System.Guid actId) {
            return base.Channel.DeleteActAsync(actId);
        }
        
        public bool DeleteActPreparator(System.Guid actPreparatorId) {
            return base.Channel.DeleteActPreparator(actPreparatorId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteActPreparatorAsync(System.Guid actPreparatorId) {
            return base.Channel.DeleteActPreparatorAsync(actPreparatorId);
        }
        
        public bool DeleteAppeal(System.Guid appealId) {
            return base.Channel.DeleteAppeal(appealId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAppealAsync(System.Guid appealId) {
            return base.Channel.DeleteAppealAsync(appealId);
        }
        
        public bool DeleteCaseRuling(System.Guid caseRulingId) {
            return base.Channel.DeleteCaseRuling(caseRulingId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCaseRulingAsync(System.Guid caseRulingId) {
            return base.Channel.DeleteCaseRulingAsync(caseRulingId);
        }
        
        public bool DeleteSide(System.Guid sideId) {
            return base.Channel.DeleteSide(sideId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSideAsync(System.Guid sideId) {
            return base.Channel.DeleteSideAsync(sideId);
        }
        
        public bool DeleteLawyerAssignment(System.Guid lawyerAssignmentId) {
            return base.Channel.DeleteLawyerAssignment(lawyerAssignmentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteLawyerAssignmentAsync(System.Guid lawyerAssignmentId) {
            return base.Channel.DeleteLawyerAssignmentAsync(lawyerAssignmentId);
        }
        
        public bool DeleteSummon(System.Guid summonId) {
            return base.Channel.DeleteSummon(summonId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSummonAsync(System.Guid summonId) {
            return base.Channel.DeleteSummonAsync(summonId);
        }
    }
}
